{"version":3,"sources":["packages/react-stateful/src/model.ts","packages/react-stateful/src/stateful.ts","packages/react-pangul-core/src/domain/userContext.ts","packages/react-pangul-app/src/components/layout/layoutTheme/layoutTheme.tsx","packages/react-pangul-core/src/infrastructure/providers/provider.ts","packages/react-pangul-core/src/providers/loggerProvider.ts","packages/react-pangul-core/src/infrastructure/providers/providerFactory.ts","packages/react-pangul-core/src/infrastructure/fetch/standardError.ts","packages/react-pangul-core/src/infrastructure/fetch/ajaxFetch.ts","packages/react-pangul-core/src/infrastructure/logger/consoleLogger.ts","packages/react-pangul-core/src/infrastructure/providers/providerSingleton.ts","packages/react-pangul-core/src/providers/fetchProvider.ts","packages/react-pangul-app/src/infrastructure/service/settingsProvider.ts","packages/react-pangul-core/src/infrastructure/baseController.ts","packages/react-pangul-app/src/components/topic/topicLink/topicLink.tsx","packages/react-pangul-core/src/controllers/authController.ts","packages/react-pangul-core/src/services/authService.ts","packages/react-pangul-app/src/components/common/loaders/pageLoader.tsx","packages/react-pangul-app/src/components/layout/layoutContentContainer/layoutContentContainer.tsx","packages/react-pangul-app/src/components/common/errors/errorNotice/errorNotice.tsx","packages/react-pangul-app/src/components/layout/layoutFormContainer/layoutFormContainer.tsx","packages/react-pangul-app/src/components/layout/layoutRightBox/layoutRightBox.tsx","packages/react-pangul-app/src/pages/generic/genericLoginPage/genericLoginPage.tsx","packages/react-pangul-app/src/app/appAuth/appAuth.tsx","packages/react-pangul-app/src/components/common/display/safeHtml/safeHtml.tsx","packages/react-pangul-app/src/components/common/display/safeMarkdown/safeMarkdown.tsx","packages/react-pangul-app/src/components/common/editors/markdownEditor/markdownEditor.tsx","packages/react-pangul-app/src/components/answer/answerForm/answerForm.tsx","packages/react-pangul-app/src/components/common/display/infoNotice/infoNotice.tsx","packages/react-pangul-core/src/controllers/topicsController.ts","packages/react-pangul-core/src/domain/querySet.ts","packages/react-pangul-core/src/domain/topic.ts","packages/react-pangul-app/src/infrastructure/service/navigationService.ts","packages/react-pangul-app/src/components/question/questionLink/questionLink.tsx","packages/react-pangul-app/src/components/topic/topicInfo/topicInfo.tsx","packages/react-pangul-app/src/components/user/userCurrentInfo/userCurrentInfo.tsx","packages/react-pangul-app/src/components/layout/layoutFooter/layoutFooter.tsx","packages/react-pangul-app/src/components/layout/layoutStandardHeader/layoutStandardHeader.tsx","packages/react-pangul-app/src/components/layout/layoutRightBottom/layoutRightBottom.tsx","packages/react-pangul-app/src/components/layout/layoutIf/layoutIf.tsx","packages/react-pangul-app/src/components/metadata/votesAndStars/votesAndStars.tsx","packages/react-pangul-app/src/components/tag/tagList/tagList.tsx","packages/react-pangul-app/src/components/user/userSummary/userSummary.tsx","packages/react-pangul-app/src/components/question/questionView/questionView.tsx","packages/react-pangul-core/src/controllers/answersController.ts","packages/react-pangul-core/src/domain/answerMeta.ts","packages/react-pangul-core/src/controllers/usersController.ts","packages/react-pangul-core/src/infrastructure/caching/memoryCache.ts","packages/react-pangul-core/src/domain/userView.ts","packages/react-pangul-core/src/domain/answer.ts","packages/react-pangul-core/src/controllers/questionsController.ts","packages/react-pangul-core/src/domain/questionMeta.ts","packages/react-pangul-core/src/domain/question.ts","packages/react-pangul-app/src/infrastructure/componentHelpers/page.ts","packages/react-pangul-app/src/pages/answer/topicAnswerQuestion/topicAnswerQuestion.ts","packages/react-pangul-app/src/pages/answer/topicAnswerQuestion/topicAnswerQuestionPage.tsx","packages/react-pangul-app/src/components/layout/layoutUnsafeBox/layoutUnsafeBox.tsx","packages/react-pangul-app/src/components/layout/layoutWithPermissions/layoutWithPermissions.tsx","packages/react-pangul-app/src/components/layout/layoutStandardUnsafe/layoutStandardUnsafe.tsx","packages/react-pangul-app/src/pages/answer/topicEditAnswer/topicEditAnswer.ts","packages/react-pangul-app/src/pages/answer/topicEditAnswer/topicEditAnswerPage.tsx","packages/react-pangul-app/src/pages/generic/genericHelpPage/genericHelpPage.tsx","packages/react-pangul-app/src/pages/generic/genericLogoutPage/genericLogoutPage.tsx","packages/react-pangul-app/src/components/common/editors/inputEditor/inputEditor.tsx","packages/react-pangul-app/src/components/answer/answerLink/answerLink.tsx","packages/react-pangul-app/src/components/tag/tagPicker/tagPicker.tsx","packages/react-pangul-app/src/components/common/utility/sameArray.ts","packages/react-pangul-app/src/components/question/questionForm/questionForm.tsx","packages/react-pangul-app/src/pages/question/topicAskQuestion/topicAskQuestion.ts","packages/react-pangul-app/src/pages/question/topicAskQuestion/topicAskQuestionPage.tsx","packages/react-pangul-app/src/pages/question/topicEditQuestion/topicEditQuestion.ts","packages/react-pangul-app/src/pages/question/topicEditQuestion/topicEditQuestionPage.tsx","packages/react-pangul-app/src/components/answer/answerView/answerView.tsx","packages/react-pangul-app/src/components/answer/answerList/answerList.tsx","packages/react-pangul-app/src/components/common/fragments/querySetPaginator/querySetPaginator.tsx","packages/react-pangul-app/src/pages/question/topicViewQuestion/topicViewQuestion.ts","packages/react-pangul-app/src/pages/question/topicViewQuestion/topicViewQuestionPage.tsx","packages/react-pangul-app/src/components/common/fragments/searchBar/searchBar.tsx","packages/react-pangul-app/src/components/topic/topicView/topicView.tsx","packages/react-pangul-app/src/components/topic/topicList/topicList.tsx","packages/react-pangul-core/src/domain/questionSummary.ts","packages/react-pangul-app/src/pages/topic/topicDiscover/topicDiscover.ts","packages/react-pangul-app/src/components/metadata/votesAndStarsReadonly/votesAndStarsReadonly.tsx","packages/react-pangul-app/src/components/question/questionSummaryView/questionSummaryView.tsx","packages/react-pangul-app/src/components/question/questionSummaryList/questionSummaryList.tsx","packages/react-pangul-app/src/pages/topic/topicDiscover/topicDiscoverPage.tsx","packages/react-pangul-app/src/components/common/editors/inlineImgEditor/inlineImgEditor.tsx","packages/react-pangul-app/src/components/topic/topicForm/topicForm.tsx","packages/react-pangul-app/src/pages/topic/topicEdit/topicEdit.ts","packages/react-pangul-app/src/pages/topic/topicEdit/topicEditPage.tsx","packages/react-pangul-app/src/pages/topic/topicSearch/topicSearch.ts","packages/react-pangul-app/src/pages/topic/topicSearch/topicSearchPage.tsx","packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfile.ts","packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfilePage.tsx","packages/react-pangul-app/src/app/appRoutes/appRoutes.tsx","packages/react-pangul-app/src/app/pangul/pangul.tsx","App.tsx","registerServiceWorker.ts","index.tsx"],"names":["Model","state","_unsafeAssignState","blank","rebind","asyncUpdateAction","this","props","parent","error","updating","updateDepth","observer","Subject","onUpdate","subscriber","subscribe","unsubscribe","_startUpdate","delta","_completedUpdate","next","Object","entries","entry","Stateful","_","UserContext","update","a","loggedIn","permissions","username","LayoutTheme","className","children","React","Provider","instance","provide","Error","LoggerProvider","factory","StandardError","message","errors","innerErrors","AjaxFetch","rootUrl","body","JSON","stringify","logger","get","info","url","fetch","method","response","ok","statusText","json","apiHeaders","Headers","raw","serializeRequestBody","cache","credentials","headers","mode","redirect","errorDetail","result","success","status","ConsoleLogger","window","console","optionalParams","log","ProviderSingleton","FetchProvider","SettingsProvider","TopicLinkType","BaseController","post","data","AuthController","password","AuthService","authController","context","login","claims","user","token","logout","reset","length","filter","p","find","i","PageLoader","loading","LayoutContentContainer","ErrorNotice","innerRef","scrollAsync","ref","renderInnerErrors","inner","kv","push","key","setTimeout","current","ReactDOM","scrollIntoView","block","behavior","LayoutFormContainer","LayoutRightBox","position","expand","style","GenericLoginPage","onSubmitLogin","e","preventDefault","onUsernameChange","setState","currentTarget","value","onPasswordChange","onSubmit","type","onChange","AppAuth","refreshed","resubscribe","content","renderLoggedIn","renderLoggedOut","forceUpdate","service","refresh","then","SafeHtml","sanitize","allowProtocolRelative","allowedAttributes","img","allowedIframeHostnames","allowedTags","allowedSchemes","allowedSchemesAppliedToAttributes","allowedSchemesByTag","selfClosing","output","safe","dangerouslySetInnerHTML","__html","SafeMarkdown","converter","Showdown","html","makeHtml","markdown","MarkdownEditor","events","lastPropValue","event","AnswerForm","lastUpdate","Date","onBodyChanged","onSave","answer","action","saveText","submit","InfoNotice","TopicsController","RowVersion","rowVersion","TopicId","topicId","name","id","TopicName","query","offset","limit","QuerySet","page","pageSize","fetchIds","queryResult","deferred","identityList","map","fetchInstance","Promise","all","instances","moreResults","reject","querySet","undefined","Topic","controller","delete","fetchData","simpleState","description","icon","topic","fromQuery","searchForIds","getById","search","NavigationService","root","baseUrl","endsWith","replace","questionId","answerId","location","href","QuestionLinkType","TopicLink","nav","linkUrl","getUrl","to","target","AddQuestion","urlForTopicAddQuestion","View","urlForTopic","Edit","urlForTopicEdit","None","urlForRoot","TopicDescription","desc","TopicIcon","src","TopicInfo","UserCurrentInfo","urlForSelfProfile","urlForLogout","LayoutFooter","settings","footerNotice","urlForHelp","LayoutStandardHeader","QuestionLink","question","topicName","urlForQuestion","urlForQuestionEdit","Answer","urlForQuestionAnswer","LayoutRightBottom","LayoutIf","show","VotesAndStars","onVoteUp","userVotes","onVote","onVoteDown","onStar","showStars","userStars","upStyles","downStyles","starStyles","join","onClick","votes","TagList","tags","urlForTopicQuery","UserSummary","QuestionView","meta","voteUp","voteDown","voteNeutral","stars","addStar","removeStar","star","global","title","AnswersController","metadata","AnswerMeta","updateMetadata","getMetadata","answerMetaId","userQueryCache","pending","requests","requestKey","MemoryCache","isExpired","expiresIn","expires","now","resolve","UserController","userId","waitPending","cachedResponse","set","UserView","userData","fetchAnswerData","add","identity","canEdit","answerData","QuestionsController","QuestionMeta","questionMetaId","Question","fetchQuestionData","questionData","Page","isLoaded","runAsync","loadInitialData","task","err","TopicAnswerQuestion","notice","save","fromProps","TopicAnswerQuestionPage","answerQuestionEvent","answerQuestion","unload","load","guardInvalidState","LayoutUnsafeBox","toggleOpenState","open","LayoutWithPermissions","auth","authorized","hasPermissions","requirePermissions","LayoutStandardUnsafe","TopicEditAnswer","TopicEditAnswerPage","saveAnswerEvent","saveAnswer","onDeleteQuestion","deleteAnswer","HelpTip","GenericHelpPage","GenericLogoutPage","onLogout","authService","InputEditor","AnswerLinkType","TagPicker","onTagsChangedEvent","lastTags","tagEditValue","onTagsChanged","b","index","isSameArray","self","indexOf","split","trim","onlyUnique","QuestionForm","onSaveEvent","onTitleChangedEvent","onBodyChangedEvent","onTopicChanged","onTitleChanged","showTopic","TopicAskQuestion","TopicAskQuestionPage","askQuestion","TopicEditQuestion","postDeleteUrl","TopicEditQuestionPage","onUpdateQuestionEvent","updateQuestion","deleteQuestion","AnswerLink","urlForAnswerEdit","AnswerView","AnswerList","renderAnswerList","answers","QuerySetPaginator","onChangeSize","ev","val","Number","options","allowedSizes","queryState","onPrev","onNext","TopicViewQuestion","prev","refreshData","TopicViewQuestionPage","size","setPageSize","SearchBar","searchStream","onChangeEvent","pipe","debounceTime","debounce","defaultProps","TopicView","TopicList","renderList","topics","QuestionSummary","summary","getSummary","TopicDiscover","questions","VotesAndStarsReadonly","QuestionSummaryView","renderAnswer","QuestionSummaryList","showEmpty","TopicDiscoverPage","onSearchEvent","onSearch","RenderImg","InlineImgEditor","loaded","total","files","file","reader","FileReader","onloadend","onprogress","readAsDataURL","TopicForm","onDescChangedEvent","onDescChanged","onIconChangedEvent","onIconChanged","TopicEdit","TopicEditPage","onSubmitFormEvent","saveTopic","onDeleteTopic","deleteTopic","home","TopicSearch","TopicSearchPage","lastSearchProp","prevProps","prevState","snapshot","UserViewSelfProfile","starQuestions","UserViewSelfProfilePage","starred","AppRoutes","help","discoverTopics","searchTopicWithQuery","match","params","searchTopic","editTopic","viewQuestion","editQuestion","editAnswer","exact","path","render","Pangul","showLoginForm","showContent","test","showTestContent","showMainContent","testContent","configure","backendUrl","appTestContent","App","isLocalhost","Boolean","hostname","register","navigator","URL","process","toString","origin","addEventListener","swUrl","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","document","getElementById","registerServiceWorker"],"mappings":"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","file":"static/js/main.5b348bc2.chunk.js","sourcesContent":["import Stateful from \"./stateful\";\n\nexport abstract class Model<TState> extends Stateful {\n    public constructor(state?: TState) {\n        super(state || {});\n        if (!state) {\n            this._unsafeAssignState(this.blank());\n        }\n        this.rebind();\n    }\n\n    public get state(): TState {\n        return this.props as TState;\n    }\n\n    /** Update the state and rebind parent elements */\n    public async update(asyncUpdateAction: () => Promise<{ [key: string]: any } | undefined | null>): Promise<void> {\n        await super.update(asyncUpdateAction);\n        this.rebind();\n    }\n\n    /** Return a blank instance of TState */\n    protected abstract blank(): TState;\n\n    /** Rebind all child elements to have this as a parent */\n    protected abstract rebind(): void;\n}\n","import {Subject} from \"rxjs\";\n\nexport default class Stateful {\n    public parent: Stateful | null;\n\n    public props: { [key: string]: any };\n\n    public error: Error | null;\n\n    public updating: boolean;\n\n    /** If a deep update is taking place (eg. update in update), resolve it using this */\n    private updateDepth = 0;\n\n    /** The internal observer for this object's props */\n    private observer = new Subject<Stateful>();\n\n    constructor(state?: { [key: string]: any }) {\n        this.error = null;\n        this.updating = false;\n        this.parent = null;\n        this.props = {};\n        this._unsafeAssignState(state);\n    }\n\n    /**\n     * Subscribe to updates on this object.\n     * @param onUpdate The action to invoke on an update.\n     * @return A closure to unsubscribe.\n     */\n    public subscribe(onUpdate: () => void): () => void {\n        const subscriber = this.observer.subscribe(onUpdate);\n        return () => {\n            subscriber.unsubscribe();\n        };\n    }\n\n    /** Update the object, or least make some attempt to do so */\n    public async update(asyncUpdateAction: () => Promise<{ [key: string]: any } | undefined | null>): Promise<void> {\n        this._startUpdate();\n        try {\n            const delta = await asyncUpdateAction();\n            if (delta) {\n                this.props = {...this.props, ...delta};\n            }\n        } catch (error) {\n            this.error = error;\n        }\n        this._completedUpdate();\n    }\n\n    public _startUpdate() {\n        this.updateDepth += 1;\n        this.updating = true;\n        this.error = null;\n        if (this.updateDepth === 1) {\n            this.observer.next(this);\n        }\n        if (this.parent) {\n            this.parent._startUpdate();\n        }\n    }\n\n    public _completedUpdate() {\n        this.updateDepth -= 1;\n        if (this.updateDepth === 0) {\n            this.updating = false;\n            if (this.parent) {\n                this.parent._completedUpdate();\n            }\n            this.observer.next(this);\n        }\n    }\n\n    protected _unsafeAssignState(state?: { [key: string]: any }) {\n        if (state) {\n            this.props = state;\n            try {\n                for (const entry of Object.entries(state)) {\n                    if (entry[1] instanceof Stateful) {\n                        entry[1].parent = this;\n                    }\n                }\n            } catch (_) {\n                // props wasn't a map.\n            }\n        }\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\n\nexport interface IUserContext {\n    loggedIn: boolean;\n    username: string;\n    permissions: string[];\n}\n\nexport class UserContext extends Model<IUserContext> {\n    /** Reset to the default state */\n    public async reset(): Promise<void> {\n        await this.update(async () => {\n            return this.blank();\n        });\n    }\n\n    protected blank(): IUserContext {\n        return {\n            loggedIn: false,\n            permissions: [],\n            username: \"anonymous user\",\n        };\n    }\n\n    protected rebind(): void {\n        // No bindings\n    }\n}\n","import * as React from \"react\";\nimport \"./layoutTheme.css\";\n\nexport class LayoutTheme extends React.Component {\n    public render() {\n        return (\n            <div className=\"component--LayoutTheme\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","export default abstract class Provider<T> {\n    public get(): T {\n        const instance = this.provide();\n        if (!instance) {\n            throw new Error(\"Provider not configured\");\n        }\n        return instance;\n    }\n\n    protected abstract provide(): T | null;\n}","import ProviderFactory from \"../infrastructure/providers/providerFactory\";\nimport ILogger from \"../interfaces/logger\";\n\nexport const LoggerProvider = new ProviderFactory<ILogger>(null);\n","import Provider from \"./provider\";\n\nexport default class ProviderFactory<T> extends Provider<T> {\n    public constructor(private factory: (() => T) | null) {\n        super();\n    }\n\n    public configure(factory: () => T) {\n        this.factory = factory;\n    }\n\n    protected provide(): T | null {\n        return this.factory == null ? null : this.factory();\n    }\n}\n","export default class StandardError extends Error {\n    public innerErrors: { [key: string]: string } = {};\n    constructor(message: string, errors: { [key: string]: string }) {\n        super(message); // (1)\n        this.innerErrors = errors;\n    }\n}\n","import \"whatwg-fetch\";\nimport IFetch from \"../../interfaces/fetch\";\nimport {LoggerProvider} from \"../../providers/loggerProvider\";\nimport IStandardResponse from \"../standardResponse\";\nimport StandardError from \"./standardError\";\n\nexport default class AjaxFetch implements IFetch {\n    private static serializeRequestBody(body: any): string {\n        try {\n            return JSON.stringify(body);\n        } catch (error) {\n            const logger = LoggerProvider.get();\n            logger.info(\"Unable to serialize object\", body);\n            logger.error(error);\n            throw new Error(\"Request failed: Unable to serialize object for POST\");\n        }\n    }\n\n    constructor(private rootUrl: string) {\n    }\n\n    public async get<T>(url: string): Promise<T> {\n        const response = await fetch(`${this.rootUrl}${url}`, {method: \"GET\"});\n        if (!response.ok) {\n            throw new Error(response.statusText);\n        }\n        return response.json();\n    }\n\n    public async post<T>(url: string, body: any): Promise<IStandardResponse<T>> {\n        const apiHeaders = new Headers({\n            \"Accept\": \"*/*\",\n            \"Content-Type\": \"application/json\",\n            \"X-Requested-With\": \"PANGUL\",\n        });\n\n        try {\n            const raw = AjaxFetch.serializeRequestBody(body);\n            const response = await fetch(`${this.rootUrl}${url}`, {\n                body: raw,\n                cache: \"no-cache\",\n                credentials: \"include\",\n                headers: apiHeaders,\n                method: \"POST\",\n                mode: \"cors\",\n                redirect: \"follow\",\n            });\n\n            if (!response.ok) {\n                try {\n                    const errorDetail = await response.json();\n                    return {\n                        error: new StandardError(errorDetail.result, errorDetail.errors),\n                        success: false,\n                    };\n                } catch (error) {\n                    return {\n                        error: new Error(`Request failed: ${response.status}: ${response.statusText}`),\n                        success: false,\n                    };\n                }\n            }\n\n            return await response.json();\n        } catch (error) {\n            return {\n                error,\n                success: false,\n            };\n        }\n    }\n}\n","import ILogger from \"../../interfaces/logger\";\n\nexport default class ConsoleLogger implements ILogger {\n    public error(error: any): void {\n        if (!error) {\n            return;\n        }\n        (window.console as any).error(error);\n    }\n\n    public info(message?: any, ...optionalParams: any[]): void {\n        // @ts-ignore\n        // noinspection TsLint\n        (window.console as any).log(message, ...optionalParams);\n    }\n}","import Provider from \"./provider\";\n\nexport default class ProviderSingleton<T> extends Provider<T> {\n    public constructor(private instance: T | null) {\n        super();\n    }\n\n    public configure(instance: T) {\n        this.instance = instance;\n    }\n\n    protected provide(): T | null {\n        return this.instance;\n    }\n}\n","import ProviderSingleton from \"../infrastructure/providers/providerSingleton\";\nimport IFetch from \"../interfaces/fetch\";\n\nexport const FetchProvider = new ProviderSingleton<IFetch>(null);\n","import * as React from \"react\";\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\nimport AjaxFetch from \"../../../../react-pangul-core/src/infrastructure/fetch/ajaxFetch\";\nimport ConsoleLogger from \"../../../../react-pangul-core/src/infrastructure/logger/consoleLogger\";\nimport ProviderSingleton from \"../../../../react-pangul-core/src/infrastructure/providers/providerSingleton\";\nimport { FetchProvider } from \"../../../../react-pangul-core/src/providers/fetchProvider\";\nimport { LoggerProvider } from \"../../../../react-pangul-core/src/providers/loggerProvider\";\n\nexport interface ITestSettings {\n    test: boolean;\n    testUser: string;\n    testUserAuth: string;\n    testContent: null | ((user: UserContext) => React.ReactNode);\n}\n\nexport interface ISettings {\n    backendUrl: string;\n    baseUrl: string;\n    footerNotice: string;\n    test: ITestSettings;\n}\n\nexport const SettingsProvider = new ProviderSingleton<ISettings>(null);\n\nexport function configureApplication(settings: ISettings) {\n    FetchProvider.configure(new AjaxFetch(settings.backendUrl));\n    LoggerProvider.configure(() => new ConsoleLogger());\n    SettingsProvider.configure(settings);\n}\n","import IFetch from \"../interfaces/fetch\";\nimport ILogger from \"../interfaces/logger\";\nimport {FetchProvider} from \"../providers/fetchProvider\";\nimport {LoggerProvider} from \"../providers/loggerProvider\";\n\nexport class BaseController {\n    private get fetch(): IFetch {\n        return FetchProvider.get();\n    }\n\n    private get logger(): ILogger {\n        return LoggerProvider.get();\n    }\n\n    protected async post<TResponse>(url: string, body: any | null): Promise<TResponse> {\n        const response = await this.fetch.post<TResponse>(url, body);\n        if (response.success) {\n            return response.data as TResponse;\n        }\n        this.logger.error(response);\n        if (response.error != null) {\n            throw response.error;\n        }\n        throw new Error(\"Internal server error\");\n    }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./topicLink.css\";\n\nexport enum TopicLinkType {\n    AddQuestion,\n    View,\n    Edit,\n    None,\n}\n\nexport interface ITopicLink {\n    target: TopicLinkType;\n    topic: string;\n}\n\nexport class TopicLink extends React.Component<ITopicLink> {\n    private nav: NavigationService;\n\n    public constructor(props: ITopicLink) {\n        super(props);\n        this.nav = new NavigationService();\n    }\n\n    public render() {\n        if (!this.props.topic) {\n            return (<React.Fragment/>);\n        }\n        const linkUrl = this.getUrl();\n        return (\n            <div className=\"component--TopicLink\">\n                <Link to={linkUrl}>{this.props.children}</Link>\n            </div>\n        );\n    }\n\n    private getUrl(): string {\n        switch (this.props.target) {\n            case TopicLinkType.AddQuestion:\n                return this.nav.urlForTopicAddQuestion(this.props.topic);\n            case TopicLinkType.View:\n                return this.nav.urlForTopic(this.props.topic);\n            case TopicLinkType.Edit:\n                return this.nav.urlForTopicEdit(this.props.topic);\n            case TopicLinkType.None:\n                return this.nav.urlForRoot();\n            default:\n                throw new Error(\"Unsupported target\");\n        }\n    }\n}\n","import {BaseController} from \"../infrastructure/baseController\";\n\nexport interface IUserClaims {\n    token: string;\n    authenticated: boolean;\n    claims: string[];\n}\n\nexport class AuthController extends BaseController {\n    public async login(username: string, password: string): Promise<void> {\n        return await this.post<void>(\"/api/auth/login\", {username, password});\n    }\n\n    public async logout(): Promise<void> {\n        return await this.post<void>(\"/api/auth/logout\", null);\n    }\n\n    public async claims(): Promise<IUserClaims> {\n        return this.post<IUserClaims>(\"/api/auth/claims\", null);\n    }\n}\n","import {AuthController} from \"../controllers/authController\";\nimport {UserContext} from \"../domain/userContext\";\n\nexport default class AuthService {\n\n    private authController: AuthController;\n\n    constructor() {\n        this.authController = new AuthController();\n    }\n\n    public async login(context: UserContext, username: string, password: string) {\n        await context.update(async () => {\n            await this.authController.login(username, password);\n            const user = await this.authController.claims();\n            return {\n                loggedIn: true,\n                permissions: user.claims,\n                username: user.token,\n            };\n        });\n    }\n\n    public async logout(context: UserContext) {\n        await context.update(async () => {\n            await this.authController.logout();\n            await context.reset();\n            return null;\n        });\n    }\n\n    /** Check if a user has the required permissions */\n    public hasPermissions(user: UserContext, permissions: string[]): boolean {\n        if (permissions.length === 0) {\n            return false;\n        }\n        if (user == null) {\n            return false;\n        }\n        const missingPermissions = permissions.filter((p) => !user.state.permissions.find((i) => i === p));\n        return missingPermissions.length === 0;\n    }\n\n    /** Get the current logged in user, if any */\n    public async refresh(user: UserContext) {\n        await user.update(async () => {\n            try {\n                const claims = await this.authController.claims();\n                return {\n                    loggedIn: true,\n                    permissions: claims.claims,\n                    username: claims.token,\n                };\n            } catch (error) {\n                // Not logged in\n                await user.reset();\n                return user.state;\n            }\n        });\n    }\n}\n","import * as React from \"react\";\nimport \"./pageLoader.css\";\n\nexport interface IPageLoader {\n    loading: boolean;\n}\n\nexport class PageLoader extends React.Component<IPageLoader> {\n    public render() {\n        if (!this.props.loading) {\n            return <React.Fragment/>;\n        }\n        return (\n            <div className=\"component--PageLoader\">\n                <div>\n                    loading\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport \"./layoutContentContainer.css\";\n\nexport class LayoutContentContainer extends React.PureComponent {\n    public render() {\n        return (\n            <div className=\"component--LayoutContentContainer\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./errorNotice.css\";\n\nexport interface IErrorLike {\n    message: string;\n    innerErrors?: { [key: string]: string };\n}\n\nexport interface IErrorNotice {\n    error: IErrorLike | null;\n}\n\nexport class ErrorNotice extends React.Component<IErrorNotice> {\n    private readonly innerRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: IErrorNotice) {\n        super(props);\n        this.innerRef = React.createRef<HTMLDivElement>();\n    }\n\n    public render() {\n        if (!this.props.error) {\n            return (<React.Fragment/>);\n        }\n\n        this.scrollAsync();\n        return (\n            <div className=\"component--ErrorNotice\" ref={this.innerRef}>\n                <em>{this.props.error.message}</em>\n                {this.renderInnerErrors()}\n            </div>\n        );\n    }\n\n    private renderInnerErrors() {\n        if (this.props.error == null || !this.props.error.innerErrors) {\n            return \"\";\n        }\n        const inner = [];\n        for (const kv of Object.entries(this.props.error.innerErrors)) {\n            inner.push(<li key={kv[0]}>{kv[0]}: {kv[1]}</li>);\n        }\n        return (\n            <ul>\n                {inner}\n            </ul>\n        );\n    }\n\n    private scrollAsync() {\n        setTimeout(() => {\n            if (this.innerRef.current != null) {\n                const errorRef = ReactDOM.findDOMNode(this.innerRef.current);\n                (errorRef as Element).scrollIntoView({block: \"end\", behavior: \"smooth\"});\n            }\n        }, 1);\n    }\n}\n","import * as React from \"react\";\nimport {ErrorNotice} from \"../../common/errors/errorNotice/errorNotice\";\nimport \"./layoutFormContainer.css\";\n\nexport interface ILayoutFormContainer {\n    error: Error | null;\n}\n\nexport class LayoutFormContainer extends React.Component<ILayoutFormContainer> {\n    public render() {\n        return (\n            <div className=\"component--LayoutFormContainer\">\n                <ErrorNotice error={this.props.error}/>\n                {this.props.children}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport \"./layoutRightBox.css\";\n\nexport interface ILayoutRightBox {\n    expand: boolean;\n}\n\nexport class LayoutRightBox extends React.PureComponent<ILayoutRightBox> {\n    public render() {\n        const position = this.props.expand ? \"static\" : \"absolute\";\n        return (\n            <div className=\"component--LayoutRightBox\" style={{position}}>\n                {this.props.children}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\nimport {PageLoader} from \"../../../components/common/loaders/pageLoader\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport \"./genericLoginPage.css\";\n\nexport interface IGenericLoginPage {\n    user: UserContext;\n}\n\nexport interface IGenericLoginPageState {\n    username: string;\n    password: string;\n}\n\nexport class GenericLoginPage extends React.Component<IGenericLoginPage, IGenericLoginPageState> {\n    public constructor(props: IGenericLoginPage) {\n        super(props);\n        this.state = {\n            password: \"...\",\n            username: \"username\",\n        };\n    }\n\n    public render() {\n        return (\n            <div className=\"component--GenericLoginPage\">\n                <PageLoader loading={this.props.user.updating}/>\n                <LayoutContentContainer>\n                    <h3 className=\"notice\">\n                        Login required\n                    </h3>\n                </LayoutContentContainer>\n                <LayoutFormContainer error={this.props.user.error}>\n                    <form onSubmit={this.onSubmitLogin}>\n                        <fieldset>\n                            <input type=\"text\" value={this.state.username} onChange={this.onUsernameChange}/>\n                        </fieldset>\n                        <fieldset>\n                            <input type=\"password\" value={this.state.password} onChange={this.onPasswordChange}/>\n                        </fieldset>\n                        <LayoutRightBox expand={true}>\n                            <button>Login</button>\n                        </LayoutRightBox>\n                    </form>\n                </LayoutFormContainer>\n            </div>\n        );\n    }\n\n    private onSubmitLogin = (e: React.FormEvent) => {\n        e.preventDefault();\n        const service = new AuthService();\n        service.login(this.props.user, this.state.username, this.state.password);\n    }\n\n    private onUsernameChange = (e: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            username: e.currentTarget.value,\n        });\n    }\n\n    private onPasswordChange = (e: React.FormEvent<HTMLInputElement>) => {\n        this.setState({\n            password: e.currentTarget.value,\n        });\n    }\n}\n","import * as React from \"react\";\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\nimport AuthService from \"../../../../react-pangul-core/src/services/authService\";\n\nexport interface IAppAuth {\n    user: UserContext;\n    renderLoggedIn: () => React.ReactNode;\n    renderLoggedOut: () => React.ReactNode;\n}\n\nexport interface IAppAuthState {\n    user: UserContext | null;\n    refreshed: boolean;\n}\n\nexport class AppAuth extends React.Component<IAppAuth, IAppAuthState> {\n    public static getDerivedStateFromProps(props: IAppAuth, state: IAppAuthState) {\n        if (props.user !== state.user) {\n            return {user: props.user, refreshed: false};\n        }\n        return null;\n    }\n\n    private unsubscribe: (() => void) | null = null;\n\n    public constructor(props: IAppAuth) {\n        super(props);\n        this.state = {\n            refreshed: false,\n            user: null,\n        };\n    }\n\n    public componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = null;\n        }\n    }\n\n    public componentDidMount() {\n        this.resubscribe();\n    }\n\n    public render() {\n\n        const content = this.props.user.state.loggedIn ? this.props.renderLoggedIn() : this.props.renderLoggedOut();\n        return (\n            <React.Fragment>\n                {content}\n            </React.Fragment>\n        );\n    }\n\n    public componentDidUpdate() {\n        if (!this.state.refreshed) {\n            this.resubscribe();\n        }\n    }\n\n    private resubscribe() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = null;\n        }\n        if (this.state.user) {\n            (async () => {\n                if (this.state.user) {\n                    this.unsubscribe = this.state.user.subscribe(() => {\n                        this.forceUpdate();\n                    });\n\n                    // Check for existing login\n                    const service = new AuthService();\n                    await service.refresh(this.props.user);\n                }\n            })().then(() => {\n                this.setState({refreshed: true});\n            });\n        }\n    }\n}\n","import * as React from \"react\";\nimport * as sanitize from \"sanitize-html\";\nimport \"./safeHtml.css\";\n\nexport interface ISafeHtml {\n    value: string;\n}\n\n/**\n * Note that we deliberately strip H1 and H2 out of the possible content to stop people\n * spamming random stuff into topics. The topic is H1, the answer title is H2.\n * Anything else is beyond that.\n */\nexport class SafeHtml extends React.Component<ISafeHtml> {\n    private static safe(value: string) {\n        return (sanitize as any)(value, {\n            allowProtocolRelative: true,\n            allowedAttributes: {\n                a: [\"href\", \"name\", \"target\"],\n                img: [\"src\"],\n            },\n            allowedIframeHostnames: [],\n            allowedTags: [\n                \"h3\", \"h4\", \"h5\", \"h6\", \"blockquote\", \"p\", \"a\", \"ul\", \"ol\",\n                \"nl\", \"li\", \"b\", \"i\", \"strong\", \"em\", \"strike\", \"code\", \"hr\", \"br\", \"div\",\n                \"table\", \"thead\", \"caption\", \"tbody\", \"tr\", \"th\", \"td\", \"pre\", \"iframe\", \"img\"],\n\n            allowedSchemes: [\"http\", \"https\"],\n            allowedSchemesAppliedToAttributes: [\"href\", \"src\", \"cite\"],\n            allowedSchemesByTag: {},\n            selfClosing: [\"img\", \"br\", \"hr\", \"area\", \"base\", \"basefont\", \"input\", \"link\", \"meta\"],\n        }) as string;\n    }\n\n    public constructor(props: ISafeHtml) {\n        super(props);\n    }\n\n    public render() {\n        const output = SafeHtml.safe(this.props.value);\n        return (\n            <div className=\"component--SafeHtml\" dangerouslySetInnerHTML={{__html: output}}/>\n        );\n    }\n\n\n}\n","import * as React from \"react\";\nimport * as Showdown from \"showdown\";\nimport {ErrorNotice} from \"../../errors/errorNotice/errorNotice\";\nimport {SafeHtml} from \"../safeHtml/safeHtml\";\n\nexport interface ISafeMarkdown {\n    markdown: string;\n}\n\nexport class SafeMarkdown extends React.PureComponent<ISafeMarkdown> {\n    private converter: Showdown.Converter;\n\n    constructor(props: ISafeMarkdown) {\n        super(props);\n        this.converter = new Showdown.Converter();\n    }\n\n    public render() {\n        try {\n            const html = this.converter.makeHtml(this.props.markdown);\n            return (\n                <React.Fragment>\n                    <SafeHtml value={html}/>\n                </React.Fragment>\n            );\n        } catch (error) {\n            return (\n                <ErrorNotice error={error}/>\n            );\n        }\n    }\n}\n","import * as React from \"react\";\nimport { SafeMarkdown } from \"../../display/safeMarkdown/safeMarkdown\";\nimport \"./markdownEditor.css\";\n\nexport interface IMarkdownEditor {\n    value: string;\n    onChange: (body: string) => void;\n}\n\nexport interface IMarkdownEditorState {\n    value: string;\n    lastPropValue: string;\n}\n\nexport class MarkdownEditor extends React.Component<IMarkdownEditor, IMarkdownEditorState> {\n    public static getDerivedStateFromProps(props: IMarkdownEditor, state: IMarkdownEditorState) {\n        if (props.value !== state.lastPropValue) {\n            return {value: props.value, lastPropValue: props.value};\n        }\n        return null;\n    }\n\n    private events: { [key: string]: any } = {};\n\n    constructor(props: IMarkdownEditor) {\n        super(props);\n\n        this.state = {\n            lastPropValue: \"\",\n            value: \"\",\n        };\n        this.events = {\n            onChange: (e: React.FormEvent<HTMLTextAreaElement>) => this.onChange(e),\n        };\n    }\n\n    public render() {\n        return (\n            <div className=\"component--MarkdownEditor\">\n                <textarea value={this.state.value} onChange={this.events.onChange}/>\n                <div className=\"rendered\">\n                    <SafeMarkdown markdown={this.state.value}/>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Prevent react from jumping the cursor as you type\n     */\n    private onChange(event: React.FormEvent<HTMLTextAreaElement>) {\n        const value = event.currentTarget.value;\n        this.setState({value}, () => {\n            this.props.onChange(value);\n        });\n    }\n}\n","import * as React from \"react\";\nimport { Answer } from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {MarkdownEditor} from \"../../common/editors/markdownEditor/markdownEditor\";\n\nexport interface IAnswerForm {\n    submit: () => Promise<void>;\n    answer: Answer;\n    saveText: string;\n}\n\nexport interface IAnswerFormState {\n    lastUpdate: Date;\n}\n\nexport class AnswerForm extends React.Component<IAnswerForm> {\n    private events: { [id: string]: (data: any) => void } = {};\n    private unsubscribe: (() => void) | null = null;\n\n    public constructor(props: IAnswerForm) {\n        super(props);\n        this.state = {\n            lastUpdate: new Date(),\n        };\n        this.events = {\n            onBodyChanged: (body: string) => this.onBodyChanged(body),\n            onSave: (e: React.FormEvent) => this.onSave(e),\n        };\n    }\n\n    public componentDidMount() {\n        this.unsubscribe = this.props.answer.subscribe(() => {\n            this.setState({\n                lastUpdate: new Date(),\n            });\n        });\n    }\n\n    public componentWillUnmount() {\n        if (this.unsubscribe) {\n            this.unsubscribe();\n            this.unsubscribe = null;\n        }\n    }\n\n    public render() {\n        return (\n            <div className=\"component--Answer\">\n                <form action=\"\" onSubmit={this.events.onSave}>\n                    <fieldset>\n                        <MarkdownEditor value={this.props.answer.state.body} onChange={this.events.onBodyChanged}/>\n                    </fieldset>\n                    <fieldset className=\"buttons\">\n                        <button className=\"submit\">{this.props.saveText}</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n\n    private onSave(e: React.FormEvent) {\n        e.preventDefault();\n        this.props.submit();\n    }\n\n    private onBodyChanged(body: string) {\n        this.props.answer.update(async () => {\n            return {body};\n        });\n    }\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport \"./infoNotice.css\";\n\nexport interface IInfoNotice {\n    value: string | null;\n}\n\nexport class InfoNotice extends React.Component<IInfoNotice> {\n    private readonly innerRef: React.RefObject<HTMLDivElement>;\n\n    constructor(props: IInfoNotice) {\n        super(props);\n        this.innerRef = React.createRef<HTMLDivElement>();\n    }\n\n    public render() {\n        if (!this.props.value) {\n            return (<React.Fragment/>);\n        }\n\n        this.scrollAsync();\n        return (\n            <div className=\"component--InfoNotice\" ref={this.innerRef}>\n                {this.props.value}\n            </div>\n        );\n    }\n\n    private scrollAsync() {\n        setTimeout(() => {\n            if (this.innerRef.current != null) {\n                const errorRef = ReactDOM.findDOMNode(this.innerRef.current);\n                (errorRef as Element).scrollIntoView({block: \"end\", behavior: \"smooth\"});\n            }\n        }, 1);\n    }\n}\n","import { IQueryResult } from \"../domain/querySet\";\nimport { BaseController } from \"../infrastructure/baseController\";\n\nexport interface ITopic {\n    topicId: string;\n    name: string;\n    description: string;\n    icon: string | null;\n    rowVersion: string;\n}\n\nexport interface ITopicId {\n    topicId: string;\n}\n\nexport class TopicsController extends BaseController {\n    public async delete(state: ITopic): Promise<void> {\n        return await this.post<void>(\"/api/topics/delete\", {\n            RowVersion: state.rowVersion,\n            TopicId: state.topicId,\n        });\n    }\n\n    public async get(name: string, id: string | null): Promise<ITopic> {\n        if (id) {\n            return await this.post<ITopic>(\"/api/topics/get\", {\n                TopicId: id,\n            });\n        }\n        return await this.post<ITopic>(\"/api/topics/get\", {\n            TopicName: name,\n        });\n    }\n\n    public async update(state: ITopic): Promise<ITopicId> {\n        return await this.post<ITopic>(\"/api/topics/update\", state);\n    }\n\n    public async search(query: string, offset: number, limit: number): Promise<IQueryResult> {\n        return await this.post<IQueryResult>(\"/api/topics/search\", {\n            limit,\n            offset,\n            query,\n        });\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport Stateful from \"../../../react-stateful/src/stateful\";\n\nexport interface IQueryResult {\n    identityList: string[];\n    moreResults: boolean;\n}\n\nexport interface IQueryFunc<TModel> {\n    query: string;\n    fetchIds: (query: string, offset: number, limit: number) => Promise<IQueryResult>;\n    fetchInstance: (identity: string) => Promise<TModel>;\n    pageSize: number;\n}\n\nexport interface IQuery<TModel> extends IQueryLike {\n    query: string;\n    fetchIds: (query: string, offset: number, limit: number) => Promise<IQueryResult>;\n    fetchInstance: (identity: string) => Promise<TModel>;\n    instances: TModel[];\n}\n\nexport interface IQueryLike {\n    page: number;\n    pageSize: number;\n    moreResults: boolean;\n}\n\nexport class QuerySet<TModel extends Stateful> extends Model<IQuery<TModel>> {\n\n    /** Create a queryset from a model, and maybe load a specific page */\n    public static async fromQuery<TModel extends Stateful>(query: IQueryFunc<TModel>, page?: number) {\n        const querySet = new QuerySet<TModel>({\n            ...query,\n            instances: [],\n            moreResults: false,\n            page: -1,\n        });\n\n        if (page !== null && page !== undefined) {\n            await querySet.fetch(page);\n        }\n\n        return querySet;\n    }\n\n    /** Fetch a specific page */\n    public fetch(page: number): Promise<void> {\n        return this.update(async () => {\n            const offset = page <= 0 ? 0 : page * this.state.pageSize;\n            const queryResult = await this.state.fetchIds(this.state.query, offset, this.state.pageSize);\n            const deferred = queryResult.identityList.map((id) => this.state.fetchInstance(id));\n            const instances = await Promise.all(deferred);\n            return {\n                instances,\n                moreResults: queryResult.moreResults,\n                page,\n            };\n        });\n    }\n\n    /** Next page */\n    public async next() {\n        await this.update(async () => {\n            if (!this.state.moreResults) {\n                throw new Error(\"No more results in QuerySet\");\n            }\n            return null;\n        });\n        if (!this.error) {\n            await this.fetch(this.state.page + 1);\n        }\n    }\n\n    /** Previous page */\n    public async prev() {\n        await this.update(async () => {\n            if (this.state.page <= 0) {\n                throw new Error(\"Already on first page of QuerySet\");\n            }\n            return null;\n        });\n        if (!this.error) {\n            await this.fetch(this.state.page - 1);\n        }\n    }\n\n    protected blank(): IQuery<TModel> {\n        return {\n            fetchIds: () => Promise.reject(new Error(\"Not implemented\")),\n            fetchInstance: () => Promise.reject(new Error(\"Not implemented\")),\n            instances: [],\n            moreResults: false,\n            page: 0,\n            pageSize: 10,\n            query: \"\",\n        };\n    }\n\n    protected rebind(): void {\n        this.state.instances.map((i) => {\n            i.parent = this;\n        });\n    }\n}","import {Model} from \"../../../react-stateful/src/model\";\nimport {TopicsController} from \"../controllers/topicsController\";\nimport {IQueryResult, QuerySet} from \"./querySet\";\n\nexport interface ITopic {\n    topicId: string;\n    name: string;\n    icon: string | null;\n    description: string;\n    rowVersion: string;\n}\n\nexport class Topic extends Model<ITopic> {\n    /** Return an instance */\n    public static async get(name: string): Promise<Topic> {\n        const topic = new Topic();\n        topic.state.name = name;\n        await topic.refresh();\n        return topic;\n    }\n\n    /** Search for topics */\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Topic>> {\n        return QuerySet.fromQuery({\n            fetchIds: Topic.searchForIds,\n            fetchInstance: Topic.getById,\n            pageSize,\n            query,\n        }, page);\n    }\n\n    /** Return an instance by id */\n    private static async getById(topicId: string): Promise<Topic> {\n        const topic = new Topic();\n        topic.state.topicId = topicId;\n        await topic.refresh();\n        return topic;\n    }\n\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\n        const controller = new TopicsController();\n        return await controller.search(query, offset, limit);\n    }\n\n    public async delete(): Promise<void> {\n        const controller = new TopicsController();\n        await this.update(async () => {\n            await controller.delete(this.state);\n            return this.blank();\n        });\n    }\n\n    /** Refresh a answer instance */\n    public async refresh(): Promise<void> {\n        await this.update(async () => await this.fetchData(this.state.name, this.state.topicId));\n    }\n\n    /** Reset to the default state */\n    public async reset(): Promise<void> {\n        await this.update(async () => {\n            return this.blank();\n        });\n    }\n\n    /** Save the state */\n    public async save(): Promise<void> {\n        const controller = new TopicsController();\n        await this.update(async () => {\n            const simpleState = {\n                ...this.state,\n            };\n            if (!this.state.topicId) {\n                throw new Error(\"Topics can only be auto-generated, use Topic.get\");\n            }\n            await controller.update(simpleState);\n            return await this.fetchData(this.state.name, null);\n        });\n    }\n\n    protected blank(): ITopic {\n        return {\n            description: \"\",\n            icon: \"\",\n            name: \"\",\n            rowVersion: \"\",\n            topicId: \"\",\n        };\n    }\n\n    protected async fetchData(name: string, topicId: string | null): Promise<ITopic> {\n        const controller = new TopicsController();\n        const data = await controller.get(name, topicId);\n        return data;\n    }\n\n    protected rebind(): void {\n        // No child elements\n    }\n}\n","import {SettingsProvider} from \"./settingsProvider\";\n\nexport default class NavigationService {\n    private readonly root: string;\n\n    constructor() {\n        this.root = SettingsProvider.get().baseUrl;\n        if (this.root.endsWith(\"/\")) {\n            this.root = this.root.replace(/\\/*$/, \"\");\n        }\n    }\n\n    public urlForAnswerEdit(topic: string, questionId: string, answerId: string) {\n        return `${this.root}/t/${topic}/${questionId}/answer/${answerId}/edit`;\n    }\n\n    public urlForQuestion(topic: string, questionId: string): string {\n        return `${this.root}/t/${topic}/${questionId}`;\n    }\n\n    public urlForQuestionEdit(topic: string, questionId: string): string {\n        return `${this.root}/t/${topic}/${questionId}/edit`;\n    }\n\n    public urlForTopic(topic: string) {\n        return `${this.root}/t/${topic}`;\n    }\n\n    public urlForTopicEdit(topic: string) {\n        return `${this.root}/t/${topic}/edit`;\n    }\n\n    public urlForTopicAddQuestion(topic: string) {\n        return `${this.root}/t/${topic}/ask`;\n    }\n\n    public urlForQuestionAnswer(topic: string, questionId: string): string {\n        return `${this.root}/t/${topic}/${questionId}/answer`;\n    }\n\n    public urlForHelp() {\n        return `${this.root}/help`;\n    }\n\n    public urlForRoot() {\n        return `${this.root}`;\n    }\n\n    public urlForLogout() {\n        return `${this.root}/logout`;\n    }\n\n    public urlForSelfProfile() {\n        return `${this.root}/self`;\n    }\n\n    public urlForTopicQuery(topic: any, query: string) {\n        return `${this.root}/t/${topic}/search/${query}`;\n    }\n\n    public redirect(url: string) {\n        window.location.href = url;\n    }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./questionLink.css\";\n\nexport enum QuestionLinkType {\n    Answer,\n    View,\n    Edit,\n}\n\nexport interface IQuestionLink {\n    question: Question | QuestionSummary;\n    target: QuestionLinkType;\n}\n\nexport class QuestionLink extends React.Component<IQuestionLink> {\n    private nav: NavigationService;\n\n    public constructor(props: IQuestionLink) {\n        super(props);\n        this.nav = new NavigationService();\n    }\n\n    public render() {\n        if (!this.props.question) {\n            return (<React.Fragment/>);\n        }\n        const linkUrl = this.getUrl();\n\n        return (\n            <Link to={linkUrl}>{this.props.children}</Link>\n        );\n    }\n\n    private getUrl(): string {\n        const topicName = this.props.question.state.topic;\n        const questionId = this.props.question.state.questionId;\n        switch (this.props.target) {\n            case QuestionLinkType.View:\n                return this.nav.urlForQuestion(topicName, questionId);\n            case QuestionLinkType.Edit:\n                return this.nav.urlForQuestionEdit(topicName, questionId);\n            case QuestionLinkType.Answer:\n                return this.nav.urlForQuestionAnswer(topicName, questionId);\n            default:\n                throw new Error(\"Unsupported target\");\n        }\n    }\n}\n","import * as React from \"react\";\nimport {ITopic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {TopicLink, TopicLinkType} from \"../topicLink/topicLink\";\nimport \"./topicInfo.css\";\n\nconst TopicDescription = (props: ITopic) => {\n    if (props.topicId) {\n        const desc = props.description || \"no description\";\n        return (\n            <div className=\"desc\">\n                <TopicLink target={TopicLinkType.Edit} topic={props.name}>\n                    {desc}\n                </TopicLink>\n            </div>\n        );\n    }\n    return (\n        <div className=\"desc\"/>\n    );\n};\n\nconst TopicIcon = (props: ITopic) => {\n    if (!props.icon) {\n        return <React.Fragment/>;\n    }\n    return (\n        <div className=\"icon\">\n            <img src={props.icon}/>\n        </div>\n    );\n};\n\nexport class TopicInfo extends React.Component<ITopic> {\n    public render() {\n        const name = this.props.name || \"no topic\";\n        const type = this.props.name ? TopicLinkType.View : TopicLinkType.None;\n        return (\n            <div className=\"component--TopicInfo\">\n                <TopicIcon {...this.props}/>\n                <div>\n                    <TopicLink target={type} topic={name}>\n                        <h1 className=\"header\">{name}</h1>\n                    </TopicLink>\n                    <TopicDescription {...this.props}/>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport {IUserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./userCurrentInfo.css\";\n\nexport interface IUserCurrentInfo {\n    user: IUserContext;\n\n}\n\nexport class UserCurrentInfo extends React.Component<IUserCurrentInfo> {\n    private readonly nav = new NavigationService();\n\n    public render() {\n        return (\n            <div className=\"component--UserCurrentInfo\">\n                <div>\n                    <Link to={this.nav.urlForSelfProfile()}>{this.props.user.username}</Link>\n                </div>\n                <div className=\"logout\">\n                    <Link to={this.nav.urlForLogout()}>logout</Link>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport { SettingsProvider } from \"../../../infrastructure/service/settingsProvider\";\nimport \"./layoutFooter.css\";\n\nexport class LayoutFooter extends React.PureComponent {\n    public render() {\n        const settings = SettingsProvider.get();\n        const nav = new NavigationService();\n        return (\n            <div className=\"component--LayoutFooter\">\n                <div>\n                    <div className=\"message\">\n                        {settings.footerNotice}\n                    </div>\n                    <div className=\"home\">\n                        <Link to={nav.urlForRoot()}>Home</Link>\n                    </div>\n                    <div className=\"help\">\n                        <Link to={nav.urlForHelp()}>Help</Link>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport { ITopic, Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\nimport { IUserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport { PageLoader } from \"../../common/loaders/pageLoader\";\nimport { TopicInfo } from \"../../topic/topicInfo/topicInfo\";\nimport { UserCurrentInfo } from \"../../user/userCurrentInfo/userCurrentInfo\";\nimport { LayoutFooter } from \"../layoutFooter/layoutFooter\";\nimport \"./layoutStandardHeader.css\";\n\nexport interface ILayoutStandardHeader {\n    user: IUserContext;\n    topic: ITopic | null;\n    loading: boolean;\n}\n\nexport class LayoutStandardHeader extends React.Component<ILayoutStandardHeader> {\n    public render() {\n        const topic = this.props.topic || new Topic().state;\n        return (\n            <React.Fragment>\n                <div className=\"component--LayoutStandardHeader\">\n                    <PageLoader loading={this.props.loading}/>\n                    <TopicInfo {...topic} />\n                    <UserCurrentInfo user={this.props.user}/>\n                </div>\n                <LayoutFooter/>\n            </React.Fragment>\n        );\n    }\n}\n","import * as React from \"react\";\nimport \"./layoutRightBottom.css\";\n\nexport class LayoutRightBottom extends React.PureComponent {\n    public render() {\n        return (\n            <div className=\"component--LayoutRightBottom\">\n                {this.props.children}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\n\nexport interface ILayoutIf {\n    show: boolean | string;\n}\n\nexport class LayoutIf extends React.PureComponent<ILayoutIf> {\n    public render() {\n        if (!this.props.show) {\n            return <React.Fragment/>;\n        }\n        return (\n            <React.Fragment>\n                {this.props.children}\n            </React.Fragment>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\nimport \"./votesAndStars.css\";\n\nexport interface IVotesAndStars {\n    votes: number;\n    userVotes: number;\n    userStars: number;\n    showStars: boolean;\n    onVote: (votes: number) => Promise<void>;\n    onStar: ((stars: number) => Promise<void>) | null;\n}\n\nexport class VotesAndStars extends React.Component<IVotesAndStars> {\n    public render() {\n        const upStyles = this.props.userVotes > 0 ? [\"up\", \"active\"] : [\"up\"];\n        const downStyles = this.props.userVotes < 0 ? [\"down\", \"active\"] : [\"down\"];\n        const starStyles = this.props.userStars > 0 ? [\"star\", \"active\"] : [\"star\"];\n        return (\n            <div className=\"component--VotesAndStars\">\n                <li>\n                    <div className={upStyles.join(\" \")} onClick={this.onVoteUp}/>\n                </li>\n                <li>\n                    <div className=\"votes\">{this.props.votes}</div>\n                </li>\n                <li>\n                    <div className={downStyles.join(\" \")} onClick={this.onVoteDown}/>\n                </li>\n                <LayoutIf show={this.props.showStars}>\n                    <li className=\"star-container\">\n                        <div className={starStyles.join(\" \")} onClick={this.onStar}/>\n                    </li>\n                </LayoutIf>\n            </div>\n        );\n    }\n\n    private onVoteUp = async () => {\n        if (this.props.userVotes === 1) {\n            await this.props.onVote(0);\n        } else {\n            await this.props.onVote(1);\n        }\n    }\n\n    private onVoteDown = async () => {\n        if (this.props.userVotes === -1) {\n            await this.props.onVote(0);\n        } else {\n            await this.props.onVote(-1);\n        }\n    }\n\n    private onStar = async () => {\n        if (!this.props.showStars || !this.props.onStar) {\n            return;\n        }\n        if (this.props.userStars > 0) {\n            await this.props.onStar(0);\n        } else {\n            await this.props.onStar(1);\n        }\n    }\n}\n","import * as React from \"react\";\nimport \"./tagList.css\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport {Link} from \"react-router-dom\";\n\nexport interface ITagList {\n    tags: string[];\n    topic: string | null;\n}\n\nexport class TagList extends React.Component<ITagList> {\n    private nav: NavigationService;\n\n    constructor(props: ITagList) {\n        super(props);\n        this.nav = new NavigationService();\n    }\n\n    public render() {\n        // TODO: Make tag pages and link to them\n        const tags = this.props.tags.map((i) => {\n            // In some cases, eg. tag picker, these shouldn't be clickable.\n            if (this.props.topic == null) {\n                return (\n                    <div key={i} className=\"tag\">\n                        {i}\n                    </div>\n                );\n            }\n\n            // But in most cases, they should link to the associated topic query\n            const linkUrl = this.nav.urlForTopicQuery(this.props.topic, `tag:${i}`);\n            return (\n                <div key={i} className=\"tag\">\n                    <Link to={linkUrl}>\n                        {i}\n                    </Link>\n                </div>\n            );\n        });\n        if (tags.length === 0) {\n            return <React.Fragment/>;\n        }\n        return (\n            <div className=\"component--TagList\">\n                {this.props.tags.length > 0 ? tags : \"No tags\"}\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {UserView} from \"../../../../../react-pangul-core/src/domain/userView\";\nimport \"./userSummary.css\";\n\nexport interface IUserSummary {\n    user: UserView;\n}\n\nexport class UserSummary extends React.PureComponent<IUserSummary> {\n    public render() {\n        return (\n            <div className=\"component--UserSummary\">\n                by: {this.props.user.state.username}\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\nimport {VotesAndStars} from \"../../metadata/votesAndStars/votesAndStars\";\nimport {TagList} from \"../../tag/tagList/tagList\";\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\nimport \"./questionView.css\";\n\nexport interface IQuestionView {\n    question: Question;\n}\n\nexport class QuestionView extends React.Component<IQuestionView> {\n    public render() {\n        const meta = this.props.question.state.meta;\n        return (\n            <div className=\"component--QuestionView\">\n                <div className=\"metadata\">\n                    <VotesAndStars showStars={true}\n                                   userStars={meta.state.star ? 1 : 0}\n                                   userVotes={meta.state.votes}\n                                   votes={meta.state.global.votes}\n                                   onVote={this.onVote}\n                                   onStar={this.onStar}/>\n                </div>\n                <div className=\"output\">\n                    <h2>{this.props.question.state.title}</h2>\n                    <TagList tags={this.props.question.state.tags} topic={this.props.question.state.topic}/>\n                    <SafeMarkdown markdown={this.props.question.state.body}/>\n                    <LayoutRightBottom>\n                        <UserSummary user={this.props.question.state.user}/>\n                    </LayoutRightBottom>\n                </div>\n            </div>\n        );\n    }\n\n    private onVote = async (votes: number) => {\n        if (votes > 0) {\n            await this.props.question.state.meta.voteUp();\n        } else if (votes < 0) {\n            await this.props.question.state.meta.voteDown();\n        } else {\n            await this.props.question.state.meta.voteNeutral();\n        }\n    }\n\n    private onStar = async (stars: number) => {\n        if (stars) {\n            await this.props.question.state.meta.addStar();\n        } else {\n            await this.props.question.state.meta.removeStar();\n        }\n    }\n}\n","import {IAnswerMeta} from \"../domain/answerMeta\";\nimport {IQueryResult} from \"../domain/querySet\";\nimport {BaseController} from \"../infrastructure/baseController\";\n\ninterface IAnswerId {\n    answerId: string;\n}\n\ninterface IAnswerNew {\n    questionId: string;\n    body: string;\n}\n\nexport interface IAnswerData {\n    userId: string;\n    questionId: string;\n    answerId: string;\n    body: string;\n    canEdit: boolean;\n    rowVersion: string;\n}\n\nexport class AnswersController extends BaseController {\n    public async add(answer: IAnswerNew): Promise<IAnswerId> {\n        return await this.post<IAnswerId>(\"/api/Answers/add\", answer);\n    }\n\n    public async delete(answerId: string) {\n        return await this.post<IAnswerData>(\"/api/Answers/delete\", {id: answerId});\n    }\n\n    public async get(answerId: string): Promise<IAnswerData> {\n        return await this.post<IAnswerData>(\"/api/Answers/get\", {id: answerId});\n    }\n\n    public async getMetadata(answerId: string) {\n        return await this.post<IAnswerMeta>(\"/api/Answers/metadata\", {id: answerId});\n    }\n\n    public async updateMetadata(metadata: IAnswerMeta) {\n        return await this.post<void>(\"/api/Answers/updateMetadata\", metadata);\n    }\n\n    public async update(Answer: IAnswerData): Promise<IAnswerId> {\n        return await this.post<IAnswerId>(\"/api/Answers/update\", Answer);\n    }\n\n    public async search(questionId: string, offset: number, limit: number): Promise<IQueryResult> {\n        return await this.post<IQueryResult>(\"/api/Answers/search\", {\n            limit,\n            offset,\n            questionId,\n        });\n    }\n\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {AnswersController} from \"../controllers/answersController\";\n\nexport interface IAnswerGlobalMeta {\n    votes: number;\n}\n\nexport interface IAnswerMeta {\n    answerMetaId: string;\n    answerId: string;\n    rowVersion: string;\n    votes: number;\n    global: IAnswerGlobalMeta;\n}\n\nexport class AnswerMeta extends Model<IAnswerMeta> {\n\n    public async voteUp() {\n        await this.update(async () => {\n            const controller = new AnswersController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: 1,\n            });\n            return await controller.getMetadata(this.state.answerId);\n        });\n    }\n\n    public async voteNeutral() {\n        await this.update(async () => {\n            const controller = new AnswersController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: 0,\n            });\n            return await controller.getMetadata(this.state.answerId);\n        });\n    }\n\n    public async voteDown() {\n        await this.update(async () => {\n            const controller = new AnswersController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: -1,\n            });\n            return await controller.getMetadata(this.state.answerId);\n        });\n    }\n\n    protected blank(): IAnswerMeta {\n        return {\n            answerId: \"\",\n            answerMetaId: \"\",\n            global: {\n                votes: 0,\n            },\n            rowVersion: \"\",\n            votes: 0,\n        };\n    }\n\n    protected rebind(): void {\n        // No child objects\n    }\n}\n","import {BaseController} from \"../infrastructure/baseController\";\nimport MemoryCache from \"../infrastructure/caching/memoryCache\";\n\nconst userQueryCache = new MemoryCache();\n\nexport interface IUserData {\n    token: string;\n    authenticated: boolean;\n    claims: string[];\n}\n\nexport class UserController extends BaseController {\n    public async get(userId: string): Promise<IUserData> {\n        const requestKey = `/api/users/get::${userId}`;\n\n        // Wait for any pending ops\n        await userQueryCache.waitPending();\n\n        // Check for resolved items\n        const cachedResponse = userQueryCache.get<IUserData>(requestKey);\n        if (cachedResponse) {\n            return cachedResponse;\n        }\n\n        // Nope, do the full thing and cache the result\n        return await userQueryCache.update(async () => {\n            const result = await this.post<IUserData>(\"/api/users/get\", {id: userId});\n            userQueryCache.set(requestKey, result, 2000);\n            return result;\n        });\n    }\n}\n","interface ICacheEntry {\n    value: any;\n    expires: number;\n}\n\nexport default class MemoryCache {\n    private static isExpired(entry: ICacheEntry) {\n        return entry.expires < Date.now();\n    }\n\n    private pending: Promise<void> | null = null;\n\n    private readonly requests: { [key: string]: ICacheEntry } = {};\n\n    public get<T>(requestKey: string): T | null {\n        const entry = this.requests[requestKey];\n        if (!entry) {\n            return null;\n        }\n\n        if (MemoryCache.isExpired(entry)) {\n            delete this.requests[requestKey];\n            return null;\n        }\n\n        return entry.value as T;\n    }\n\n    public set(requestKey: string, result: any, expiresIn: number) {\n        this.requests[requestKey] = {\n            expires: Date.now() + expiresIn,\n            value: result,\n        };\n    }\n\n    public async waitPending(): Promise<void> {\n        if (this.pending) {\n            await this.pending;\n        }\n    }\n\n    public async update<T>(action: () => Promise<T>): Promise<T> {\n        let result: T | null = null;\n\n        this.pending = new Promise(async (resolve, reject) => {\n            try {\n                result = await action();\n                resolve();\n            } catch (error) {\n                reject(error);\n            }\n        });\n        await this.pending;\n\n        if (result == null) {\n            throw new Error(\"No data returned from cache update query\");\n        }\n\n        return result;\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {UserController} from \"../controllers/usersController\";\n\nexport interface IUserView {\n    userId: string;\n    username: string;\n}\n\nexport class UserView extends Model<IUserView> {\n    /** Fetch a user from the user id */\n    public static async get(userId: string): Promise<UserView> {\n        const user = new UserView();\n        user.state.userId = userId;\n        await user.refresh();\n        return user;\n    }\n\n    /** Reset to the default state */\n    public async reset(): Promise<void> {\n        await this.update(async () => {\n            return this.blank();\n        });\n    }\n\n    /** Fetch from the database */\n    public async refresh(): Promise<void> {\n        await this.update(async () => {\n            const controller = new UserController();\n            const userData = await controller.get(this.state.userId);\n            return userData;\n        });\n    }\n\n    protected blank(): IUserView {\n        return {\n            userId: \"\",\n            username: \"\",\n        };\n    }\n\n    protected rebind(): void {\n        // No bindings\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {AnswersController} from \"../controllers/answersController\";\nimport {AnswerMeta} from \"./answerMeta\";\nimport {IQueryResult, QuerySet} from \"./querySet\";\nimport {UserView} from \"./userView\";\n\nexport interface IAnswer {\n    answerId: string;\n    canEdit: boolean;\n    questionId: string;\n    body: string;\n    meta: AnswerMeta;\n    rowVersion: string;\n    userId: string;\n    user: UserView;\n}\n\nexport class Answer extends Model<IAnswer> {\n    /** Return a answer instance */\n    public static async get(answerId: string): Promise<Answer> {\n        const answer = new Answer();\n        answer.state.answerId = answerId;\n        await answer.refresh();\n        return answer;\n    }\n\n    /** Search for answers */\n    public static search(questionId: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Answer>> {\n        return QuerySet.fromQuery({\n            fetchIds: Answer.searchForIds,\n            fetchInstance: Answer.get,\n            pageSize,\n            query: questionId,\n        }, page);\n    }\n\n    private static async searchForIds(questionId: string, offset: number, limit: number): Promise<IQueryResult> {\n        const controller = new AnswersController();\n        return await controller.search(questionId, offset, limit);\n    }\n\n    /** Refresh a answer instance */\n    public async refresh(): Promise<void> {\n        await this.update(async () => await this.fetchAnswerData(this.state.answerId));\n    }\n\n    /** Reset to the default state */\n    public async reset(): Promise<void> {\n        await this.update(async () => {\n            return this.blank();\n        });\n    }\n\n    /** Save a answer */\n    public async save(): Promise<void> {\n        const controller = new AnswersController();\n        await this.update(async () => {\n            const simpleState = {\n                ...this.state,\n            };\n            delete simpleState.meta;\n            delete simpleState.user;\n            if (!this.state.answerId) {\n                const identity = await controller.add(simpleState);\n                return await this.fetchAnswerData(identity.answerId);\n            }\n            await controller.update(simpleState);\n            return await this.fetchAnswerData(this.state.answerId);\n        });\n    }\n\n    /** Delete this answer, if you're allowed to */\n    public async delete(): Promise<void> {\n        await this.update(async () => {\n            const controller = new AnswersController();\n            await controller.delete(this.state.answerId);\n            return this.blank();\n        });\n    }\n\n    protected blank(): IAnswer {\n        return {\n            answerId: \"\",\n            body: \"...\",\n            canEdit: false,\n            meta: new AnswerMeta(),\n            questionId: \"\",\n            rowVersion: \"\",\n            user: new UserView(),\n            userId: \"\",\n        };\n    }\n\n    protected async fetchAnswerData(answerId: string): Promise<IAnswer> {\n        const controller = new AnswersController();\n        const answerData = await controller.get(answerId);\n        const meta = new AnswerMeta(await controller.getMetadata(answerId));\n        const user = await UserView.get(answerData.userId);\n        return {\n            ...answerData,\n            meta,\n            user,\n        };\n    }\n\n    protected rebind(): void {\n        this.state.meta.parent = this;\n    }\n\n}\n","import {IQueryResult} from \"../domain/querySet\";\nimport {IQuestionMeta} from \"../domain/questionMeta\";\nimport {BaseController} from \"../infrastructure/baseController\";\n\ninterface IQuestionId {\n    questionId: string;\n}\n\nexport interface IQuestionData {\n    canEdit: boolean;\n    questionId: string;\n    topic: string;\n    title: string;\n    body: string;\n    tags: string[];\n    userId: string;\n    rowVersion: string;\n}\n\nexport interface IQuestionSummaryData {\n    answer: string | null;\n    canEdit: boolean;\n    questionId: string;\n    topic: string;\n    title: string;\n    userId: string;\n    summary: string;\n    tags: string[];\n}\n\nexport class QuestionsController extends BaseController {\n    public async add(question: IQuestionData): Promise<IQuestionId> {\n        return await this.post<IQuestionId>(\"/api/questions/add\", question);\n    }\n\n    public async delete(questionId: string): Promise<void> {\n        return await this.post<void>(\"/api/questions/delete\", {id: questionId});\n    }\n\n    public async get(questionId: string): Promise<IQuestionData> {\n        return await this.post<IQuestionData>(\"/api/questions/get\", {id: questionId});\n    }\n\n    public async getMetadata(questionId: string) {\n        return await this.post<IQuestionMeta>(\"/api/questions/metadata\", {id: questionId});\n    }\n\n    public async getSummary(questionId: string): Promise<IQuestionSummaryData> {\n        return await this.post<IQuestionSummaryData>(\"/api/questions/getSummary\", {id: questionId});\n    }\n\n    public async updateMetadata(metadata: IQuestionMeta) {\n        return await this.post<void>(\"/api/questions/updateMetadata\", metadata);\n    }\n\n    public async update(question: IQuestionData): Promise<IQuestionId> {\n        return await this.post<IQuestionId>(\"/api/questions/update\", question);\n    }\n\n    public async search(query: string, offset: number, limit: number): Promise<IQueryResult> {\n        return await this.post<IQueryResult>(\"/api/questions/search\", {\n            limit,\n            offset,\n            query,\n        });\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {QuestionsController} from \"../controllers/questionsController\";\n\nexport interface IQuestionGlobalMeta {\n    votes: number;\n}\n\nexport interface IQuestionMeta {\n    questionMetaId: string;\n    questionId: string;\n    rowVersion: string;\n    star: boolean;\n    votes: number;\n    global: IQuestionGlobalMeta;\n}\n\nexport class QuestionMeta extends Model<IQuestionMeta> {\n\n    public async voteUp() {\n        await this.update(async () => {\n            const controller = new QuestionsController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: 1,\n            });\n            return await controller.getMetadata(this.state.questionId);\n        });\n    }\n\n    public async voteNeutral() {\n        await this.update(async () => {\n            const controller = new QuestionsController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: 0,\n            });\n            return await controller.getMetadata(this.state.questionId);\n        });\n    }\n\n    public async voteDown() {\n        await this.update(async () => {\n            const controller = new QuestionsController();\n            await controller.updateMetadata({\n                ...this.state,\n                votes: -1,\n            });\n            return await controller.getMetadata(this.state.questionId);\n        });\n    }\n\n    public async addStar() {\n        await this.update(async () => {\n            const controller = new QuestionsController();\n            await controller.updateMetadata({\n                ...this.state,\n                star: true,\n            });\n            return await controller.getMetadata(this.state.questionId);\n        });\n    }\n\n    public async removeStar() {\n        await this.update(async () => {\n            const controller = new QuestionsController();\n            await controller.updateMetadata({\n                ...this.state,\n                star: false,\n            });\n            return await controller.getMetadata(this.state.questionId);\n        });\n    }\n\n    protected blank(): IQuestionMeta {\n        return {\n            global: {\n                votes: 0,\n            },\n            questionId: \"\",\n            questionMetaId: \"\",\n            rowVersion: \"\",\n            star: false,\n            votes: 0,\n        };\n    }\n\n    protected rebind(): void {\n        // No child objects\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {QuestionsController} from \"../controllers/questionsController\";\nimport {IQueryResult, QuerySet} from \"./querySet\";\nimport {QuestionMeta} from \"./questionMeta\";\nimport {UserView} from \"./userView\";\n\nexport interface IQuestion {\n    questionId: string;\n    topic: string;\n    title: string;\n    body: string;\n    tags: string[];\n    userId: string;\n    meta: QuestionMeta;\n    user: UserView;\n    canEdit: boolean;\n    rowVersion: string;\n}\n\nexport class Question extends Model<IQuestion> {\n    /** Return a answer instance */\n    public static async get(questionId: string): Promise<Question> {\n        const question = new Question();\n        question.state.questionId = questionId;\n        await question.refresh();\n        return question;\n    }\n\n    /** Search for topics */\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<Question>> {\n        return QuerySet.fromQuery({\n            fetchIds: Question.searchForIds,\n            fetchInstance: Question.get,\n            pageSize,\n            query,\n        }, page);\n    }\n\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\n        const controller = new QuestionsController();\n        return await controller.search(query, offset, limit);\n    }\n\n    /** Delete this answer and all it's answers and data */\n    public async delete(): Promise<void> {\n        const controller = new QuestionsController();\n        await this.update(async () => {\n            await controller.delete(this.state.questionId);\n            return {\n                questionId: \"\",\n                rowVersion: \"\",\n            };\n        });\n    }\n\n    /** Refresh a answer instance */\n    public async refresh(): Promise<void> {\n        await this.update(async () => await this.fetchQuestionData(this.state.questionId));\n    }\n\n    /** Reset to the default state */\n    public async reset(): Promise<void> {\n        await this.update(async () => {\n            return this.blank();\n        });\n    }\n\n    /** Save a answer */\n    public async save(): Promise<void> {\n        const controller = new QuestionsController();\n        await this.update(async () => {\n            const simpleState = {\n                ...this.state,\n            };\n            delete simpleState.meta;\n            delete simpleState.user;\n            if (!this.state.questionId) {\n                const identity = await controller.add(simpleState);\n                return await this.fetchQuestionData(identity.questionId);\n            }\n            await controller.update(simpleState);\n            return await this.fetchQuestionData(this.state.questionId);\n        });\n    }\n\n    protected blank(): IQuestion {\n        return {\n            body: \"...\",\n            canEdit: false,\n            meta: new QuestionMeta(),\n            questionId: \"\",\n            rowVersion: \"\",\n            tags: [],\n            title: \"new question\",\n            topic: \"default\",\n            user: new UserView(),\n            userId: \"\",\n        };\n    }\n\n    protected async fetchQuestionData(questionId: string): Promise<IQuestion> {\n        const controller = new QuestionsController();\n        const questionData = await controller.get(questionId);\n        const meta = new QuestionMeta(await controller.getMetadata(questionId));\n        const user = await UserView.get(questionData.userId);\n        return {\n            ...questionData,\n            meta,\n            user,\n        };\n    }\n\n    protected rebind(): void {\n        this.state.meta.parent = this;\n    }\n}\n","import { LoggerProvider } from \"../../../../react-pangul-core/src/providers/loggerProvider\";\nimport { Model } from \"../../../../react-stateful/src/model\";\n\nexport abstract class Page<TInitialStateProps, TPageState> extends Model<TPageState> {\n    protected isLoaded: boolean = false;\n    protected unsubscribe: () => void;\n\n    public constructor(forceUpdate: () => void) {\n        super();\n        this.unsubscribe = this.subscribe(() => {\n            forceUpdate();\n        });\n    }\n\n    public load(props: TInitialStateProps) {\n        this.isLoaded = true;\n        this.runAsync(async () => await this.loadInitialData(props));\n    }\n\n    public unload(): void {\n        if (this.isLoaded) {\n            this.isLoaded = false;\n            this.unsubscribe();\n        }\n    }\n\n    protected abstract loadInitialData(props: TInitialStateProps): Promise<void>;\n\n    protected runAsync(task: () => Promise<void>) {\n        setTimeout(() => {\n            task().then(() => {\n                // Success, do nothing\n            }, (err) => {\n                LoggerProvider.get().error(err);\n            });\n        }, 1);\n    }\n}\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\n\nexport interface ITopicAnswerQuestionProps {\n    topic: string;\n    question: string;\n    user: UserContext;\n}\n\ninterface ITopicAnswerQuestion {\n    topic: Topic;\n    question: Question;\n    answer: Answer;\n    notice: string | null;\n}\n\nexport class TopicAnswerQuestion extends Page<ITopicAnswerQuestionProps, ITopicAnswerQuestion> {\n    public async answerQuestion() {\n        await this.update(async () => {\n            return Promise.resolve({notice: null});\n        });\n        await this.state.answer.update(async () => {\n            return {\n                questionId: this.state.question.state.questionId,\n            };\n        });\n        await this.state.answer.save();\n        if (this.state.answer.error === null) {\n            await this.update(async () => {\n                return Promise.resolve({notice: \"Saved answer\"});\n            });\n        }\n    }\n\n    protected async loadInitialData(fromProps: ITopicAnswerQuestionProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            const question = await Question.get(fromProps.question);\n            if (question.error) {\n                throw question.error;\n            }\n\n            return {question, topic, answer: new Answer()};\n        });\n    }\n\n    protected blank(): ITopicAnswerQuestion {\n        return {\n            answer: new Answer(),\n            notice: null,\n            question: new Question(),\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.question.parent = this;\n        this.state.answer.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {AnswerForm} from \"../../../components/answer/answerForm/answerForm\";\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\nimport {ITopicAnswerQuestionProps, TopicAnswerQuestion} from \"./topicAnswerQuestion\";\n\nexport class TopicAnswerQuestionPage extends React.Component<ITopicAnswerQuestionProps> {\n    private data: TopicAnswerQuestion;\n\n    constructor(props: ITopicAnswerQuestionProps) {\n        super(props);\n        this.data = new TopicAnswerQuestion(() => this.forceUpdate());\n\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicAnswerQuestion(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const question = this.data.state.question;\n        const answer = this.data.state.answer;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n                <LayoutContentContainer>\n                    <LayoutRightBox expand={false}>\n                        <QuestionLink question={question} target={QuestionLinkType.View}>\n                            View full question\n                        </QuestionLink>\n                    </LayoutRightBox>\n                    <QuestionView question={question}/>\n                </LayoutContentContainer>\n\n                <LayoutFormContainer error={this.data.state.question.error}>\n                    <InfoNotice value={this.data.state.notice}/>\n                    <AnswerForm submit={this.answerQuestionEvent}\n                                answer={answer}\n                                saveText=\"Save\"/>\n                </LayoutFormContainer>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private answerQuestionEvent = () => this.data.answerQuestion();\n}\n","import * as React from \"react\";\nimport \"./layoutUnsafeBox.css\";\n\nexport interface ILayoutUnsafeBox {\n    title: string;\n}\n\nexport interface ILayoutUnsafeBoxState {\n    open: boolean;\n}\n\nexport class LayoutUnsafeBox extends React.Component<ILayoutUnsafeBox, ILayoutUnsafeBoxState> {\n    public constructor(props: ILayoutUnsafeBox) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n    }\n\n    public render() {\n        if (this.state.open) {\n            return (\n                <div className=\"component--LayoutUnsafeBox\">\n                    <div className=\"header\" onClick={this.toggleOpenState}>\n                        {this.props.title}\n                    </div>\n                    {this.props.children}\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"component--LayoutUnsafeBox\">\n                <div className=\"header\" onClick={this.toggleOpenState}>\n                    {this.props.title}\n                </div>\n            </div>\n        );\n    }\n\n    private toggleOpenState = () => {\n        this.setState({open: !this.state.open});\n    }\n}\n","import * as React from \"react\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\n\nexport interface ILayoutWithPermissions {\n    user: UserContext;\n    requirePermissions: string[];\n}\n\nexport class LayoutWithPermissions extends React.Component<ILayoutWithPermissions> {\n    private auth = new AuthService();\n\n    public render() {\n        return (\n            <React.Fragment>\n                {this.authorized() ? this.props.children : <React.Fragment/>}\n            </React.Fragment>\n        );\n    }\n\n    private authorized(): boolean {\n        return this.auth.hasPermissions(this.props.user, this.props.requirePermissions);\n    }\n}\n","import * as React from \"react\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {LayoutContentContainer} from \"../layoutContentContainer/layoutContentContainer\";\nimport {LayoutUnsafeBox} from \"../layoutUnsafeBox/layoutUnsafeBox\";\nimport {LayoutWithPermissions} from \"../layoutWithPermissions/layoutWithPermissions\";\n\nexport interface ILayoutStandardUnsafe {\n    user: UserContext;\n    permissions: string[];\n}\n\nexport class LayoutStandardUnsafe extends React.Component<ILayoutStandardUnsafe> {\n    public render() {\n        return (\n            <LayoutWithPermissions user={this.props.user} requirePermissions={this.props.permissions}>\n                <LayoutContentContainer>\n                    <LayoutUnsafeBox title=\"Unsafe commands\">\n                        <form>\n                            <fieldset>\n                                {this.props.children}\n                            </fieldset>\n                        </form>\n                    </LayoutUnsafeBox>\n                </LayoutContentContainer>\n            </LayoutWithPermissions>\n        );\n    }\n}\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\n\nexport interface ITopicEditAnswerProps {\n    topic: string;\n    question: string;\n    answer: string;\n    user: UserContext;\n}\n\ninterface ITopicEditAnswer {\n    topic: Topic;\n    question: Question;\n    answer: Answer;\n    notice: string | null;\n}\n\nexport class TopicEditAnswer extends Page<ITopicEditAnswerProps, ITopicEditAnswer> {\n    public async saveAnswer(): Promise<void> {\n        await this.update(async () => {\n            return Promise.resolve({notice: null});\n        });\n        await this.state.answer.save();\n        if (this.state.answer.error === null) {\n            await this.update(async () => {\n                return Promise.resolve({notice: \"Saved answer\"});\n            });\n        }\n    }\n\n    public async deleteAnswer() {\n        await this.state.answer.delete();\n        const nav = new NavigationService();\n        const question = this.state.question;\n        nav.redirect(nav.urlForQuestion(question.state.topic, question.state.questionId));\n    }\n\n    protected async loadInitialData(fromProps: ITopicEditAnswerProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            const question = await Question.get(fromProps.question);\n            if (question.error) {\n                throw question.error;\n            }\n\n            const answer = await Answer.get(fromProps.answer);\n            if (answer.error) {\n                throw answer.error;\n            }\n\n            if (answer.state.questionId !== question.state.questionId) {\n                throw new Error(\"Invalid answer id for topic\");\n            }\n\n            return {question, topic, answer};\n        });\n    }\n\n    protected blank(): ITopicEditAnswer {\n        return {\n            answer: new Answer(),\n            notice: null,\n            question: new Question(),\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.question.parent = this;\n        this.state.answer.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {AnswerForm} from \"../../../components/answer/answerForm/answerForm\";\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {LayoutStandardUnsafe} from \"../../../components/layout/layoutStandardUnsafe/layoutStandardUnsafe\";\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\nimport {ITopicEditAnswerProps, TopicEditAnswer} from \"./topicEditAnswer\";\n\nexport class TopicEditAnswerPage extends React.Component<ITopicEditAnswerProps> {\n    private data: TopicEditAnswer;\n\n    constructor(props: ITopicEditAnswerProps) {\n        super(props);\n        this.data = new TopicEditAnswer(() => this.forceUpdate());\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicEditAnswer(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const question = this.data.state.question;\n        const answer = this.data.state.answer;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n                <LayoutContentContainer>\n                    <QuestionView question={question}/>\n                </LayoutContentContainer>\n\n                <LayoutFormContainer error={this.data.state.answer.error}>\n                    <LayoutRightBox expand={true}>\n                        <QuestionLink question={question} target={QuestionLinkType.View}>Close</QuestionLink>\n                    </LayoutRightBox>\n                    <InfoNotice value={this.data.state.notice}/>\n                    <AnswerForm submit={this.saveAnswerEvent} answer={answer} saveText=\"Save\"/>\n                </LayoutFormContainer>\n\n                <LayoutStandardUnsafe user={this.props.user} permissions={[\"CanDelete:Answer\"]}>\n                    <LayoutRightBox expand={true}>\n                        <p>\n                            Delete this answer?\n                        </p>\n                        <p>\n                            Careful! No undo for this!\n                        </p>\n                        <button onClick={this.onDeleteQuestion}>Delete answer</button>\n                    </LayoutRightBox>\n                </LayoutStandardUnsafe>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private readonly saveAnswerEvent = () => this.data.saveAnswer();\n\n    private onDeleteQuestion = async (e: React.FormEvent) => {\n        e.preventDefault();\n        await this.data.deleteAnswer();\n    }\n}\n","import * as React from \"react\";\nimport { LayoutContentContainer } from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport { LayoutFooter } from \"../../../components/layout/layoutFooter/layoutFooter\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./genericHelpPage.css\";\n\nconst HelpTip = (props: any) => {\n    return (\n        <div className=\"tip\">\n            {props.children}\n        </div>\n    );\n};\n\nexport class GenericHelpPage extends React.Component {\n    public render() {\n        const nav = new NavigationService();\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutContentContainer>\n                    <h1>Help</h1>\n\n                    <HelpTip>\n                        To start a new topic, just go to {nav.urlForTopic(\"NAME\")}\n                    </HelpTip>\n\n                    <HelpTip>\n                        Searching for tags:\n                        <code>\n                            tag:name tag:name2 some search\n                        </code>\n                    </HelpTip>\n\n                    <HelpTip>\n                        Searching for anything in a topic:\n                        <code>\n                            topic:name *\n                        </code>\n                    </HelpTip>\n\n                    <HelpTip>\n                        Searching in multiple topics:\n                        <code>\n                            topic:name topic:other query\n                        </code>\n                    </HelpTip>\n\n                    <HelpTip>\n                        Searching in any topic:\n                        <code>\n                            topic:* query\n                        </code>\n                    </HelpTip>\n                </LayoutContentContainer>\n                <LayoutFooter/>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {Redirect} from \"react-router\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport AuthService from \"../../../../../react-pangul-core/src/services/authService\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./genericLogoutPage.css\";\n\nexport interface IGenericLogoutPage {\n    user: UserContext;\n}\n\nexport interface IGenericLogoutPageState {\n    redirect: boolean;\n}\n\nexport class GenericLogoutPage extends React.Component<IGenericLogoutPage, IGenericLogoutPageState> {\n    constructor(props: IGenericLogoutPage) {\n        super(props);\n        this.state = {\n            redirect: false,\n        };\n    }\n\n    public render() {\n        if (this.state.redirect) {\n            return <Redirect to={new NavigationService().urlForRoot()}/>;\n        }\n        return (\n            <div className=\"component--GenericLogoutPage\">\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={null}\n                                      loading={this.props.user.updating}/>\n                <LayoutContentContainer>\n                    <h3 className=\"notice\">\n                        Logout?\n                    </h3>\n                    <p>\n                        Are you sure? Your current session will be abandoned.\n                    </p>\n                </LayoutContentContainer>\n                <LayoutContentContainer>\n                    <LayoutRightBox expand={true}>\n                        <button onClick={this.onLogout}>Logout</button>\n                    </LayoutRightBox>\n                </LayoutContentContainer>\n            </div>\n        );\n    }\n\n    private onLogout = async () => {\n        const user = this.props.user;\n        this.setState({redirect: true}, async () => {\n            const authService = new AuthService();\n            await authService.logout(user);\n        });\n    }\n}\n","import * as React from \"react\";\n\nexport interface IInputEditor {\n    value: string;\n    onChange: (body: string) => void;\n}\n\nexport interface IInputEditorState {\n    value: string;\n    lastPropValue: string;\n}\n\nexport class InputEditor extends React.Component<IInputEditor, IInputEditorState> {\n    public static getDerivedStateFromProps(props: IInputEditor, state: IInputEditorState) {\n        if (props.value !== state.lastPropValue) {\n            return {value: props.value, lastPropValue: props.value};\n        }\n        return null;\n    }\n\n    private events: { [key: string]: any } = {};\n\n    constructor(props: IInputEditor) {\n        super(props);\n        this.state = {\n            lastPropValue: \"\",\n            value: \"\",\n        };\n        this.events = {\n            onChange: (e: React.FormEvent<HTMLTextAreaElement>) => this.onChange(e),\n        };\n    }\n\n    public render() {\n        return (\n            <input value={this.state.value} onChange={this.events.onChange}/>\n        );\n    }\n\n    /**\n     * Prevent react from jumping the cursor as you type\n     */\n    private onChange(event: React.FormEvent<HTMLTextAreaElement>) {\n        const value = event.currentTarget.value;\n        this.setState({value}, () => {\n            this.props.onChange(value);\n        });\n    }\n}\n","import * as React from \"react\";\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport \"./answerLink.css\";\n\nexport enum AnswerLinkType {\n    Edit,\n}\n\nexport interface IAnswerLink {\n    question: Question;\n    answer: Answer;\n    target: AnswerLinkType;\n}\n\nexport class AnswerLink extends React.Component<IAnswerLink> {\n    private nav: NavigationService;\n\n    public constructor(props: IAnswerLink) {\n        super(props);\n        this.nav = new NavigationService();\n    }\n\n    public render() {\n        if (!this.props.question.state.questionId) {\n            return (<React.Fragment/>);\n        }\n        const linkUrl = this.getUrl();\n        return (\n            <div className=\"component--AnswerLink\">\n                <a href={linkUrl}>{this.props.children}</a>\n            </div>\n        );\n    }\n\n    private getUrl(): string {\n        switch (this.props.target) {\n            case AnswerLinkType.Edit:\n                return this.nav.urlForAnswerEdit(\n                    this.props.question.state.topic,\n                    this.props.question.state.questionId,\n                    this.props.answer.state.answerId);\n            default:\n                throw new Error(\"Unsupported target\");\n        }\n    }\n}\n","import * as React from \"react\";\nimport {InputEditor} from \"../../common/editors/inputEditor/inputEditor\";\nimport {isSameArray} from \"../../common/utility/sameArray\";\nimport {TagList} from \"../tagList/tagList\";\nimport \"./tagPicker.css\";\n\nexport interface ITagPicker {\n    value: string[];\n    onChange: (tags: string[]) => void;\n}\n\nexport interface ITagPickerStart {\n    lastTags: string[];\n    tagEditValue: string;\n}\n\nexport class TagPicker extends React.Component<ITagPicker, ITagPickerStart> {\n    public static getDerivedStateFromProps(props: ITagPicker, state: ITagPickerStart) {\n        if (!isSameArray(props.value, state.lastTags)) {\n            return {tagEditValue: props.value.join(\", \"), lastTags: props.value};\n        }\n        return null;\n    }\n\n    private static onlyUnique(value: string, index: number, self: string[]) {\n        return self.indexOf(value) === index;\n    }\n\n    private onTagsChangedEvent: (value: string) => void;\n\n    constructor(props: ITagPicker) {\n        super(props);\n        this.state = {\n            lastTags: [],\n            tagEditValue: \"\",\n        };\n        this.onTagsChangedEvent = (value: string) => this.onTagsChanged(value);\n    }\n\n    public render() {\n        return (\n            <div className=\"component--TagPicker\">\n                <InputEditor value={this.state.tagEditValue} onChange={this.onTagsChangedEvent}/>\n                <div className=\"rendered\">\n                    <TagList tags={this.props.value} topic={null}/>\n                </div>\n            </div>\n        );\n    }\n\n    private onTagsChanged(value: string) {\n        this.setState({tagEditValue: value}, () => {\n            const tags = value\n                .split(\",\")\n                .map((i) => i.trim())\n                .filter((i) => i.length > 0)\n                .filter(TagPicker.onlyUnique);\n\n            this.props.onChange(tags);\n        });\n    }\n}\n","export function isSameArray<T>(a: T[], b: T[]): boolean {\n    if (a.length !== b.length) {\n        return false;\n    }\n    for (let index = 0; index < a.length; index += 1) {\n        if (a[index] !== b[index]) {\n            return false;\n        }\n    }\n    return true;\n}","import * as React from \"react\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {InputEditor} from \"../../common/editors/inputEditor/inputEditor\";\nimport {MarkdownEditor} from \"../../common/editors/markdownEditor/markdownEditor\";\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\nimport {TagPicker} from \"../../tag/tagPicker/tagPicker\";\n\nexport interface IQuestionForm {\n    submit: () => void;\n    question: Question;\n    saveText: string;\n    showTopic: boolean;\n}\n\nexport class QuestionForm extends React.Component<IQuestionForm> {\n    private onSaveEvent: (e: React.FormEvent) => void;\n    private onTitleChangedEvent: (title: string) => void;\n    private onTagsChangedEvent: (tags: string[]) => void;\n    private onBodyChangedEvent: (body: string) => void;\n\n    public constructor(props: IQuestionForm) {\n        super(props);\n        this.onBodyChangedEvent = (body: string) => this.onBodyChanged(body);\n        this.onSaveEvent = (e: React.FormEvent) => this.onSave(e);\n        this.onTagsChangedEvent = (tags: string[]) => this.onTagsChanged(tags);\n        this.onTitleChangedEvent = (value: string) => this.onTitleChanged(value);\n    }\n\n    public render() {\n        return (\n            <div className=\"component--Question\">\n                <form action=\"\" onSubmit={this.onSaveEvent}>\n                    <LayoutIf show={this.props.showTopic}>\n                        <fieldset>\n                            <InputEditor value={this.props.question.state.topic} onChange={this.onTopicChanged}/>\n                        </fieldset>\n                    </LayoutIf>\n                    <fieldset>\n                        <InputEditor value={this.props.question.state.title} onChange={this.onTitleChangedEvent}/>\n                    </fieldset>\n                    <fieldset>\n                        <MarkdownEditor value={this.props.question.state.body} onChange={this.onBodyChangedEvent}/>\n                    </fieldset>\n                    <fieldset>\n                        <TagPicker value={this.props.question.state.tags} onChange={this.onTagsChangedEvent}/>\n                    </fieldset>\n                    <fieldset className=\"buttons\">\n                        <button className=\"submit\">{this.props.saveText}</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n\n    private onTopicChanged = (topic: string) => {\n        this.props.question.update(async () => {\n            return {topic};\n        });\n    }\n\n    private onSave(e: React.FormEvent) {\n        e.preventDefault();\n        this.props.submit();\n    }\n\n    private onTitleChanged(title: string) {\n        this.props.question.update(async () => {\n            return {title};\n        });\n    }\n\n    private onTagsChanged(tags: string[]) {\n        this.props.question.update(async () => {\n            return {tags};\n        });\n    }\n\n    private onBodyChanged(body: string) {\n        this.props.question.update(async () => {\n            return {body};\n        });\n    }\n}\n","import {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\n\nexport interface ITopicAskQuestionProps {\n    topic: string;\n    user: UserContext;\n}\n\ninterface ITopicAskQuestion {\n    topic: Topic;\n    question: Question;\n    notice: string | null;\n}\n\nexport class TopicAskQuestion extends Page<ITopicAskQuestionProps, ITopicAskQuestion> {\n    public async askQuestion() {\n        await this.update(async () => {\n            return Promise.resolve({notice: null});\n        });\n        await this.state.question.save();\n        if (this.state.question.error === null) {\n            await this.update(async () => {\n                return Promise.resolve({notice: \"Saved question\"});\n            });\n        }\n    }\n\n    protected async loadInitialData(fromProps: ITopicAskQuestionProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            const question = new Question();\n            await question.update(async () => {\n                return {topic: topic.state.name};\n            });\n\n            return {question, topic};\n        });\n    }\n\n    protected blank(): ITopicAskQuestion {\n        return {\n            notice: null,\n            question: new Question(),\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.question.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutIf} from \"../../../components/layout/layoutIf/layoutIf\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {QuestionForm} from \"../../../components/question/questionForm/questionForm\";\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\nimport {ITopicAskQuestionProps, TopicAskQuestion} from \"./topicAskQuestion\";\n\nexport class TopicAskQuestionPage extends React.Component<ITopicAskQuestionProps> {\n    private data: TopicAskQuestion;\n\n    constructor(props: ITopicAskQuestionProps) {\n        super(props);\n        this.data = new TopicAskQuestion(() => this.forceUpdate());\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicAskQuestion(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const question = this.data.state.question;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n                <LayoutFormContainer error={this.data.state.question.error}>\n                    <LayoutIf show={question.state.questionId}>\n                        <LayoutRightBox expand={true}>\n                            <QuestionLink question={question} target={QuestionLinkType.View}>View</QuestionLink>\n                        </LayoutRightBox>\n                    </LayoutIf>\n                    <InfoNotice value={this.data.state.notice}/>\n                    <QuestionForm showTopic={false}\n                                  submit={this.askQuestion}\n                                  question={question}\n                                  saveText=\"Save\"/>\n                </LayoutFormContainer>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private askQuestion = () => this.data.askQuestion();\n\n}\n","import {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\n\nexport interface ITopicEditQuestionProps {\n    topic: string;\n    question: string;\n    user: UserContext;\n}\n\ninterface ITopicEditQuestion {\n    topic: Topic;\n    question: Question;\n    notice: string | null;\n}\n\nexport class TopicEditQuestion extends Page<ITopicEditQuestionProps, ITopicEditQuestion> {\n    public async updateQuestion() {\n        await this.update(async () => {\n            return Promise.resolve({notice: null});\n        });\n        await this.state.question.save();\n        if (this.state.question.error === null) {\n            await this.update(async () => {\n                return Promise.resolve({notice: \"Saved question\"});\n            });\n        }\n    }\n\n    public async deleteQuestion() {\n        await this.state.question.delete();\n        const nav = new NavigationService();\n        const postDeleteUrl = nav.urlForTopic(this.state.topic.state.name);\n        nav.redirect(postDeleteUrl);\n    }\n\n    protected async loadInitialData(fromProps: ITopicEditQuestionProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            const question = await Question.get(fromProps.question);\n            if (question.error) {\n                throw question.error;\n            }\n\n            return {question, topic};\n        });\n    }\n\n    protected blank(): ITopicEditQuestion {\n        return {\n            notice: null,\n            question: new Question(),\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.question.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {LayoutStandardUnsafe} from \"../../../components/layout/layoutStandardUnsafe/layoutStandardUnsafe\";\nimport {QuestionForm} from \"../../../components/question/questionForm/questionForm\";\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\nimport {ITopicEditQuestionProps, TopicEditQuestion} from \"./topicEditQuestion\";\n\nexport class TopicEditQuestionPage extends React.Component<ITopicEditQuestionProps> {\n    private data: TopicEditQuestion;\n\n    constructor(props: ITopicEditQuestionProps) {\n        super(props);\n        this.data = new TopicEditQuestion(() => this.forceUpdate());\n\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicEditQuestion(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const question = this.data.state.question;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n                <LayoutFormContainer error={this.data.state.question.error}>\n                    <LayoutRightBox expand={true}>\n                        <QuestionLink question={question} target={QuestionLinkType.View}>Close</QuestionLink>\n                    </LayoutRightBox>\n\n                    <InfoNotice value={this.data.state.notice}/>\n\n                    <QuestionForm showTopic={true}\n                                  submit={this.onUpdateQuestionEvent}\n                                  question={question}\n                                  saveText=\"Save\"/>\n                </LayoutFormContainer>\n\n                <LayoutStandardUnsafe user={this.props.user} permissions={[\"CanDelete:Question\"]}>\n                    <LayoutRightBox expand={true}>\n                        <p>\n                            Delete this question?\n                        </p>\n                        <p>\n                            Careful! No undo for this!\n                        </p>\n                        <button onClick={this.onDeleteQuestion}>Delete question</button>\n                    </LayoutRightBox>\n                </LayoutStandardUnsafe>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onUpdateQuestionEvent = () => this.data.updateQuestion();\n\n    private onDeleteQuestion = async (e: React.FormEvent) => {\n        e.preventDefault();\n        await this.data.deleteQuestion();\n    }\n}\n","import * as React from \"react\";\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\nimport {LayoutIf} from \"../../layout/layoutIf/layoutIf\";\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\nimport {LayoutRightBox} from \"../../layout/layoutRightBox/layoutRightBox\";\nimport {VotesAndStars} from \"../../metadata/votesAndStars/votesAndStars\";\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\nimport {AnswerLink, AnswerLinkType} from \"../answerLink/answerLink\";\nimport \"./answerView.css\";\n\nexport interface IAnswerView {\n    answer: Answer;\n    question: Question;\n    topic: Topic;\n}\n\nexport class AnswerView extends React.Component<IAnswerView> {\n    public render() {\n        const meta = this.props.answer.state.meta;\n\n        return (\n            <div className=\"component--AnswerView\">\n                <LayoutIf show={this.props.answer.state.canEdit}>\n                    <LayoutRightBox expand={false}>\n                        <AnswerLink question={this.props.question} answer={this.props.answer}\n                                    target={AnswerLinkType.Edit}>\n                            Edit\n                        </AnswerLink>\n                    </LayoutRightBox>\n                </LayoutIf>\n\n                <div className=\"metadata\">\n                    <VotesAndStars showStars={false}\n                                   userStars={0}\n                                   userVotes={meta.state.votes}\n                                   votes={meta.state.global.votes}\n                                   onVote={this.onVote}\n                                   onStar={null}/>\n                </div>\n                <div className=\"output\">\n                    <div className=\"rendered\">\n                        <SafeMarkdown markdown={this.props.answer.state.body}/>\n                    </div>\n                    <LayoutRightBottom>\n                        <UserSummary user={this.props.answer.state.user}/>\n                    </LayoutRightBottom>\n                </div>\n            </div>\n        );\n    }\n\n    private onVote = async (votes: number) => {\n        if (votes > 0) {\n            await this.props.answer.state.meta.voteUp();\n        } else if (votes < 0) {\n            await this.props.answer.state.meta.voteDown();\n        } else {\n            await this.props.answer.state.meta.voteNeutral();\n        }\n    }\n}\n","import * as React from \"react\";\nimport {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\nimport {AnswerView} from \"../answerView/answerView\";\n\nexport interface IAnswerList {\n    answers: QuerySet<Answer>;\n    topic: Topic;\n    question: Question;\n}\n\nexport interface IAnswerListState {\n    pageSize: number;\n    page: number;\n}\n\nexport class AnswerList extends React.Component<IAnswerList> {\n    public render() {\n        return (\n            <div className=\"component--AnswerList\">\n                {this.renderAnswerList()}\n            </div>\n        );\n    }\n\n    public renderAnswerList() {\n        if (this.props.answers.state.instances == null) {\n            return [];\n        }\n        return this.props.answers.state.instances.map((answer) => {\n            return (\n                <LayoutContentContainer key={answer.state.answerId}>\n                    <AnswerView answer={answer}\n                                question={this.props.question}\n                                topic={this.props.topic}/>\n                </LayoutContentContainer>\n            );\n        });\n    }\n}\n","import * as React from \"react\";\nimport {IQueryLike} from \"../../../../../../react-pangul-core/src/domain/querySet\";\nimport {LayoutContentContainer} from \"../../../layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutIf} from \"../../../layout/layoutIf/layoutIf\";\nimport {ErrorNotice} from \"../../errors/errorNotice/errorNotice\";\nimport \"./querySetPaginator.css\";\n\nexport interface IQuerySetPaginator {\n    allowedSizes: number[];\n    queryState: IQueryLike;\n    onNext: () => void;\n    onPrev: () => void;\n    onChangeSize: (size: number) => void;\n    error: Error | null;\n}\n\nexport class QuerySetPaginator extends React.PureComponent<IQuerySetPaginator> {\n    public render() {\n        const options = this.props.allowedSizes.map((i) => {\n            return (\n                <option key={i}>{i}</option>\n            );\n        });\n\n        return (\n            <div className=\"component--QuerySetPaginator\">\n                <ErrorNotice error={this.props.error}/>\n                <LayoutContentContainer>\n                    <div className=\"parts\">\n                        <div className=\"part\">\n                            Results per page:\n                            <select value={this.props.queryState.pageSize} onChange={this.onChangeSize}>\n                                {options}\n                            </select>\n                        </div>\n                        <div className=\"part buttons\">\n                            <div>\n                                <LayoutIf show={this.props.queryState.page > 0}>\n                                    <button onClick={this.props.onPrev}>Prev</button>\n                                </LayoutIf>\n                                <LayoutIf show={this.props.queryState.moreResults}>\n                                    <button onClick={this.props.onNext}>Next</button>\n                                </LayoutIf>\n                            </div>\n                        </div>\n                    </div>\n                </LayoutContentContainer>\n            </div>\n        );\n    }\n\n    private onChangeSize = (ev: React.FormEvent<HTMLSelectElement>) => {\n        const val = Number(ev.currentTarget.value);\n        this.props.onChangeSize(val);\n    }\n}\n","import {Answer} from \"../../../../../react-pangul-core/src/domain/answer\";\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport {Question} from \"../../../../../react-pangul-core/src/domain/question\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport interface ITopicViewQuestionProps {\n    topic: string;\n    question: string;\n    user: UserContext;\n}\n\ninterface ITopicViewQuestion {\n    topic: Topic;\n    question: Question;\n    answers: QuerySet<Answer>;\n    pageSize: number;\n    notice: string | null;\n}\n\nexport class TopicViewQuestion extends Page<ITopicViewQuestionProps, ITopicViewQuestion> {\n    public async next(): Promise<void> {\n        await this.update(async () => {\n            await this.state.answers.next();\n            return null;\n        });\n    }\n\n    public async prev(): Promise<void> {\n        await this.update(async () => {\n            await this.state.answers.prev();\n            return null;\n        });\n    }\n\n    public async setPageSize(pageSize: number) {\n        await this.update(async () => {\n            return {pageSize};\n        });\n        await this.refreshData();\n    }\n\n    protected async loadInitialData(fromProps: ITopicViewQuestionProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            const question = await Question.get(fromProps.question);\n            if (question.error) {\n                throw question.error;\n            }\n\n            return {question, topic};\n        });\n\n        await this.refreshData();\n    }\n\n    protected blank(): ITopicViewQuestion {\n        return {\n            answers: new QuerySet<Answer>(),\n            notice: null,\n            pageSize: DEFAULT_PAGE_SIZE,\n            question: new Question(),\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.question.parent = this;\n        this.state.answers.parent = this;\n    }\n\n    protected async refreshData(): Promise<void> {\n        await this.update(async () => {\n            const question = this.state.question;\n            const answers = await Answer.search(question.state.questionId, this.state.pageSize);\n            return {answers};\n        });\n    }\n}\n","import * as React from \"react\";\nimport {AnswerList} from \"../../../components/answer/answerList/answerList\";\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutIf} from \"../../../components/layout/layoutIf/layoutIf\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {QuestionLink, QuestionLinkType} from \"../../../components/question/questionLink/questionLink\";\nimport {QuestionView} from \"../../../components/question/questionView/questionView\";\nimport {TopicLink, TopicLinkType} from \"../../../components/topic/topicLink/topicLink\";\nimport {ITopicViewQuestionProps, TopicViewQuestion} from \"./topicViewQuestion\";\n\nexport class TopicViewQuestionPage extends React.Component<ITopicViewQuestionProps> {\n    private data: TopicViewQuestion;\n\n    constructor(props: ITopicViewQuestionProps) {\n        super(props);\n        this.data = new TopicViewQuestion(() => this.forceUpdate());\n\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicViewQuestion(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const question = this.data.state.question;\n        const answers = this.data.state.answers;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicViewQuestionPage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n\n                <LayoutContentContainer>\n                    <LayoutRightBox expand={false}>\n                        <LayoutIf show={question.state.canEdit}>\n                            <QuestionLink question={question} target={QuestionLinkType.Edit}>Edit</QuestionLink>\n                        </LayoutIf>\n                        <TopicLink topic={question.state.topic} target={TopicLinkType.View}>Close</TopicLink>\n                    </LayoutRightBox>\n                    <QuestionView question={question}/>\n                </LayoutContentContainer>\n\n                <AnswerList topic={this.data.state.topic}\n                            question={this.data.state.question}\n                            answers={this.data.state.answers}/>\n\n                <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\n                                   queryState={answers.state}\n                                   onChangeSize={this.onChangeSize}\n                                   onNext={this.onNext}\n                                   onPrev={this.onPrev}\n                                   error={answers.error}/>\n\n                <LayoutContentContainer>\n                    <LayoutRightBox expand={true}>\n                        <QuestionLink question={question} target={QuestionLinkType.Answer}>\n                            <button>Answer Question</button>\n                        </QuestionLink>\n                    </LayoutRightBox>\n                </LayoutContentContainer>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\n\n    private onNext = () => this.data.next();\n\n    private onPrev = () => this.data.prev();\n}\n","import * as React from \"react\";\nimport { Subject } from \"rxjs\";\nimport { debounceTime } from \"rxjs/operators\";\nimport { LayoutFormContainer } from \"../../../layout/layoutFormContainer/layoutFormContainer\";\nimport { InputEditor } from \"../../editors/inputEditor/inputEditor\";\nimport \"./searchBar.css\";\n\nexport interface ISearchBar {\n    value: string;\n    onChange: (value: string) => void;\n    error: Error | null;\n    debounce: number;\n}\n\nexport class SearchBar extends React.Component<ISearchBar> {\n    public static defaultProps: Partial<ISearchBar> = {\n        debounce: 200,\n    };\n\n    private searchStream = new Subject<string>();\n\n    constructor(props: ISearchBar) {\n        super(props);\n        this.searchStream.pipe(debounceTime(this.props.debounce)).subscribe(async (value: string) => {\n            this.props.onChange(value);\n        });\n    }\n\n    public render() {\n        return (\n            <div className=\"component--SearchBar\">\n                <LayoutFormContainer error={this.props.error}>\n                    <form>\n                        <fieldset>\n                            <InputEditor value={this.props.value} onChange={this.onChangeEvent}/>\n                        </fieldset>\n                    </form>\n                </LayoutFormContainer>\n            </div>\n        );\n    }\n\n    private onChangeEvent = (value: string) => this.searchStream.next(value);\n}\n","import * as React from \"react\";\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\nimport { TopicLink, TopicLinkType } from \"../topicLink/topicLink\";\nimport \"./topicView.css\";\n\nexport interface ITopicView {\n    topic: Topic;\n}\n\nconst TopicIcon = (props: ITopicView) => {\n    if (!props.topic.state.icon) {\n        return <React.Fragment/>;\n    }\n    return (\n        <div className=\"icon\">\n            <img src={props.topic.state.icon}/>\n        </div>\n    );\n};\n\nexport class TopicView extends React.Component<ITopicView> {\n    public render() {\n        const description = this.props.topic.state.description || \"no description\";\n        return (\n            <div className=\"component--TopicView\">\n                <TopicIcon topic={this.props.topic}/>\n                <div>\n                    <div>\n                        <TopicLink topic={this.props.topic.state.name} target={TopicLinkType.View}>\n                            <h2>{this.props.topic.state.name}</h2>\n                        </TopicLink>\n                    </div>\n                    <div>{description}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\nimport {TopicView} from \"../topicView/topicView\";\nimport \"./topicList.css\";\n\nexport interface ITopicList {\n    topics: QuerySet<Topic>;\n}\n\nexport interface ITopicListState {\n    pageSize: number;\n    page: number;\n}\n\nexport class TopicList extends React.Component<ITopicList, ITopicListState> {\n    constructor(props: ITopicList) {\n        super(props);\n        this.state = {\n            page: 0,\n            pageSize: 10,\n        };\n    }\n\n    public render() {\n        return (\n            <div className=\"component--TopicList\">\n                {this.renderList()}\n            </div>\n        );\n    }\n\n    public renderList() {\n        if (this.props.topics.state.instances == null) {\n            return [];\n        }\n        return this.props.topics.state.instances.map((topic) => {\n            if (!topic.state.topicId) {\n                return (<React.Fragment/>);\n            }\n            return (\n                <div className=\"item\" key={topic.state.topicId}>\n                    <LayoutContentContainer>\n                        <TopicView topic={topic}/>\n                    </LayoutContentContainer>\n                </div>\n            );\n        });\n    }\n}\n","import {Model} from \"../../../react-stateful/src/model\";\nimport {QuestionsController} from \"../controllers/questionsController\";\nimport {IQueryResult, QuerySet} from \"./querySet\";\nimport {QuestionMeta} from \"./questionMeta\";\nimport {UserView} from \"./userView\";\n\nexport interface IQuestionSummary {\n    canEdit: boolean;\n    questionId: string;\n    topic: string;\n    title: string;\n    summary: string;\n    answer: string | null;\n    tags: string[];\n    user: UserView;\n    meta: QuestionMeta;\n}\n\nexport class QuestionSummary extends Model<IQuestionSummary> {\n    /** Return a answer instance */\n    public static async get(questionId: string): Promise<QuestionSummary> {\n        const question = new QuestionSummary();\n        question.state.questionId = questionId;\n        await question.refresh();\n        return question;\n    }\n\n    /** Search for topics */\n    public static search(query: string, pageSize: number = 10, page: number = 0): Promise<QuerySet<QuestionSummary>> {\n        return QuerySet.fromQuery({\n            fetchIds: QuestionSummary.searchForIds,\n            fetchInstance: QuestionSummary.get,\n            pageSize,\n            query,\n        }, page);\n    }\n\n    private static async searchForIds(query: string, offset: number, limit: number): Promise<IQueryResult> {\n        const controller = new QuestionsController();\n        return await controller.search(query, offset, limit);\n    }\n\n    /** Refresh a answer instance */\n    public async refresh(): Promise<void> {\n        await this.update(async () => await this.fetchQuestionData(this.state.questionId));\n    }\n\n    protected blank(): IQuestionSummary {\n        return {\n            answer: null,\n            canEdit: false,\n            meta: new QuestionMeta(),\n            questionId: \"\",\n            summary: \"...\",\n            tags: [],\n            title: \"new answer\",\n            topic: \"default\",\n            user: new UserView(),\n        };\n    }\n\n    protected async fetchQuestionData(questionId: string): Promise<IQuestionSummary> {\n        const controller = new QuestionsController();\n        const questionData = await controller.getSummary(questionId);\n        const meta = new QuestionMeta(await controller.getMetadata(questionId));\n        const user = await UserView.get(questionData.userId);\n        return {\n            ...questionData,\n            meta,\n            user,\n        };\n    }\n\n    protected rebind(): void {\n        this.state.meta.parent = this;\n    }\n}\n","import { QuerySet } from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\nimport { UserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport { Page } from \"../../../infrastructure/componentHelpers/page\";\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\n\nexport interface TopicDiscoverProps {\n    search: string;\n    user: UserContext;\n}\n\ninterface TopicDiscoverState {\n    search: string;\n    topics: QuerySet<Topic>;\n    questions: QuerySet<QuestionSummary>;\n}\n\nexport class TopicDiscover extends Page<TopicDiscoverProps, TopicDiscoverState> {\n    constructor(forceUpdate: () => void) {\n        super(forceUpdate);\n    }\n\n    public async search(value: string): Promise<void> {\n        await this.update(async () => {\n            return {search: value};\n        });\n\n        await this.update(async () => {\n            const topics = await Topic.search(value);\n            if (topics.error) {\n                throw topics.error;\n            }\n\n            const query = `topic:* ${value}`;\n            const questions = await QuestionSummary.search(query, 10);\n            if (questions.error) {\n                throw questions.error;\n            }\n\n            return {topics, questions};\n        });\n    }\n\n    protected async loadInitialData(fromProps: TopicDiscoverProps): Promise<void> {\n        await this.update(async () => {\n            const topics = await Topic.search(fromProps.search);\n            if (topics.error) {\n                throw topics.error;\n            }\n\n            return {topics, search: fromProps.search};\n        });\n    }\n\n    protected blank(): TopicDiscoverState {\n        return {\n            search: \"\",\n            topics: new QuerySet<Topic>(),\n            questions: new QuerySet<QuestionSummary>()\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topics.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport \"./votesAndStarsReadonly.css\";\n\nexport interface IVotesAndStarsReadonly {\n    votes: number;\n    userVotes: number;\n    userStars: number;\n}\n\nexport class VotesAndStarsReadonly extends React.Component<IVotesAndStarsReadonly> {\n    public render() {\n        const upStyles = this.props.userVotes > 0 ? [\"up\", \"active\"] : [\"up\"];\n        const downStyles = this.props.userVotes < 0 ? [\"down\", \"active\"] : [\"down\"];\n        const starStyles = this.props.userStars > 0 ? [\"star\", \"active\"] : [\"star\"];\n        return (\n            <div className=\"component--VotesAndStarsReadonly\">\n                <li>\n                    <div className={upStyles.join(\" \")}/>\n                </li>\n                <li>\n                    <div className=\"votes\">{this.props.votes}</div>\n                </li>\n                <li>\n                    <div className={downStyles.join(\" \")} />\n                </li>\n                <li className=\"star-container\">\n                    <div className={starStyles.join(\" \")}/>\n                </li>\n            </div>\n        )\n    }\n}\n","import * as React from \"react\";\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\nimport {SafeMarkdown} from \"../../common/display/safeMarkdown/safeMarkdown\";\nimport {LayoutRightBottom} from \"../../layout/layoutRightBottom/layoutRightBottom\";\nimport {VotesAndStarsReadonly} from \"../../metadata/votesAndStarsReadonly/votesAndStarsReadonly\";\nimport {TagList} from \"../../tag/tagList/tagList\";\nimport {UserSummary} from \"../../user/userSummary/userSummary\";\nimport {QuestionLink, QuestionLinkType} from \"../questionLink/questionLink\";\nimport \"./questionSummaryView.css\";\n\nexport interface IQuestionSummaryView {\n    question: QuestionSummary;\n}\n\nexport class QuestionSummaryView extends React.Component<IQuestionSummaryView> {\n    public render() {\n        const meta = this.props.question.state.meta;\n        return (\n            <div className=\"component--QuestionSummaryView\">\n                <div className=\"metadata\">\n                    <VotesAndStarsReadonly\n                        userStars={meta.state.star ? 1 : 0}\n                        userVotes={meta.state.votes}\n                        votes={meta.state.global.votes}/>\n                </div>\n                <div className=\"output\">\n                    <QuestionLink question={this.props.question} target={QuestionLinkType.View}>\n                        <h2>{this.props.question.state.title}</h2>\n                    </QuestionLink>\n                    <TagList tags={this.props.question.state.tags} topic={this.props.question.state.topic}/>\n                    <SafeMarkdown markdown={this.props.question.state.summary}/>\n                    {this.renderAnswer()}\n                    <LayoutRightBottom>\n                        <UserSummary user={this.props.question.state.user}/>\n                    </LayoutRightBottom>\n                </div>\n            </div>\n        );\n    }\n\n    private renderAnswer() {\n        if (!this.props.question.state.answer) {\n            return <React.Fragment/>;\n        }\n        return (\n            <div className=\"answer\">\n                <SafeMarkdown markdown={this.props.question.state.answer}/>\n            </div>\n        );\n    }\n}\n","import * as React from \"react\";\nimport {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\nimport {LayoutContentContainer} from \"../../layout/layoutContentContainer/layoutContentContainer\";\nimport {QuestionSummaryView} from \"../questionSummaryView/questionSummaryView\";\nimport \"./questionSummaryList.css\";\n\nexport interface QuestionSummaryListProps {\n    questions: QuerySet<QuestionSummary>;\n    showEmpty: boolean;\n}\n\nexport interface QuestionSummaryListState {\n    pageSize: number;\n    page: number;\n}\n\nexport class QuestionSummaryList extends React.Component<QuestionSummaryListProps, QuestionSummaryListState> {\n    constructor(props: QuestionSummaryListProps) {\n        super(props);\n        this.state = {\n            page: 0,\n            pageSize: 10,\n        };\n    }\n\n    public render() {\n        return (\n            <div className=\"component--QuestionSummaryList\">\n                {this.renderList()}\n            </div>\n        );\n    }\n\n    public renderList() {\n        if (this.props.questions.state.instances === null || this.props.questions.state.instances.length === 0) {\n            if (!this.props.showEmpty) {\n                return <></>;\n            }\n            return (\n                <LayoutContentContainer>\n                    No questions found\n                </LayoutContentContainer>\n            );\n        }\n        return this.props.questions.state.instances.map((question) => {\n            if (!question.state.questionId) {\n                return (<React.Fragment/>);\n            }\n            return (\n                <LayoutContentContainer key={question.state.questionId}>\n                    <QuestionSummaryView question={question}/>\n                </LayoutContentContainer>\n            );\n        });\n    }\n}\n","import * as React from \"react\";\nimport { SearchBar } from \"../../../components/common/fragments/searchBar/searchBar\";\nimport { LayoutStandardHeader } from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport { TopicList } from \"../../../components/topic/topicList/topicList\";\nimport { TopicDiscoverProps, TopicDiscover } from \"./topicDiscover\";\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\n\nexport class TopicDiscoverPage extends React.Component<TopicDiscoverProps> {\n    private data: TopicDiscover;\n\n    constructor(props: TopicDiscoverProps) {\n        super(props);\n        this.data = new TopicDiscover(() => this.forceUpdate());\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicDiscover(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return (<React.Fragment/>);\n        }\n\n        const search = this.data.state.search;\n        const topics = this.data.state.topics;\n        const questions = this.data.state.questions;\n\n        return (\n            <div className={\"component--TopicDiscoverPage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={null}\n                                      loading={this.data.updating}/>\n\n                <SearchBar value={search}\n                           onChange={this.onSearchEvent}\n                           error={this.data.error}/>\n\n                <TopicList topics={topics}/>\n\n                <QuestionSummaryList questions={questions} showEmpty={false}/>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onSearchEvent = (value: string) => this.onSearch(value);\n\n    private onSearch(value: string) {\n        this.data.search(value);\n    }\n}\n","import * as React from \"react\";\nimport \"./inlineImgEditor.css\";\n\nexport interface IInlineImgEditor {\n    value: string | null;\n    onChange: (body: string) => void;\n}\n\nexport interface IInlineImgEditorState {\n    value: string;\n    loaded: number;\n    total: number;\n    loading: boolean;\n    lastPropValue: string;\n}\n\nconst RenderImg = (props: IInlineImgEditor) => {\n    if (!props.value) {\n        return (<React.Fragment/>);\n    }\n    return (\n        <img src={props.value}/>\n    );\n};\n\nexport class InlineImgEditor extends React.Component<IInlineImgEditor, IInlineImgEditorState> {\n    public static getDerivedStateFromProps(props: IInlineImgEditor, state: IInlineImgEditorState) {\n        if (props.value !== state.lastPropValue) {\n            return {value: props.value, lastPropValue: props.value};\n        }\n        return null;\n    }\n\n    constructor(props: IInlineImgEditor) {\n        super(props);\n        this.state = {\n            lastPropValue: \"\",\n            loaded: 0,\n            loading: false,\n            total: 0,\n            value: \"\",\n        };\n    }\n\n    public render() {\n        return (\n            <div className=\"component--InlineImgEditor\">\n                <div className=\"preview\">\n                    <RenderImg {...this.props}/>\n                </div>\n                {!this.state.loading ? <React.Fragment/> : (\n                    <div className=\"progress\">\n                        {this.state.loaded} / {this.state.total}\n                    </div>\n                )}\n                <input type=\"file\" onChange={this.onChangeEvent}/>\n            </div>\n        );\n    }\n\n    private onChangeEvent = (e: React.FormEvent<HTMLInputElement>) => this.onChange(e);\n\n    /**\n     * Prevent react from jumping the cursor as you type\n     */\n    private onChange(event: React.FormEvent<HTMLInputElement>) {\n        if (event.currentTarget.files && event.currentTarget.files.length > 0) {\n            const file = event.currentTarget.files [0];\n            const reader = new FileReader();\n            this.setState({loading: true}, () => {\n                reader.onloadend = (ev: ProgressEvent) => {\n                    const value = reader.result as string;\n                    this.setState({\n                        loaded: ev.loaded,\n                        loading: false,\n                        total: ev.total,\n                        value,\n                    }, () => {\n                        this.props.onChange(value);\n                    });\n                };\n                reader.onprogress = (ev: ProgressEvent) => {\n                    this.setState({\n                        loaded: ev.loaded,\n                        total: ev.total,\n                    });\n                };\n                reader.readAsDataURL(file);\n            });\n        }\n    }\n}\n","import * as React from \"react\";\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\nimport { InlineImgEditor } from \"../../common/editors/inlineImgEditor/inlineImgEditor\";\nimport { InputEditor } from \"../../common/editors/inputEditor/inputEditor\";\n\nexport interface ITopicForm {\n    submit: () => void;\n    topic: Topic;\n    saveText: string;\n}\n\nexport class TopicForm extends React.Component<ITopicForm> {\n    public render() {\n        return (\n            <div className=\"component--Question\">\n                <form action=\"\" onSubmit={this.onSaveEvent}>\n                    <fieldset>\n                        <InputEditor value={this.props.topic.state.description} onChange={this.onDescChangedEvent}/>\n                    </fieldset>\n                    <fieldset>\n                        <InlineImgEditor value={this.props.topic.state.icon} onChange={this.onIconChangedEvent}/>\n                    </fieldset>\n                    <fieldset className=\"buttons\">\n                        <button className=\"submit\">{this.props.saveText}</button>\n                    </fieldset>\n                </form>\n            </div>\n        );\n    }\n\n    private onDescChangedEvent = (desc: string) => this.onDescChanged(desc);\n    private onIconChangedEvent = (icon: string) => this.onIconChanged(icon);\n    private onSaveEvent = (e: React.FormEvent) => this.onSave(e);\n\n    private onSave(e: React.FormEvent) {\n        e.preventDefault();\n        this.props.submit();\n    }\n\n    private onDescChanged(desc: string) {\n        this.props.topic.update(async () => {\n            return {description: desc};\n        });\n    }\n\n    private onIconChanged(icon: string) {\n        this.props.topic.update(async () => {\n            return {icon};\n        });\n    }\n}\n","import {Topic} from \"../../../../../react-pangul-core/src/domain/topic\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\n\nexport interface ITopicEditProps {\n    topic: string;\n    user: UserContext;\n}\n\ninterface ITopicEdit {\n    topic: Topic;\n    notice: string | null;\n}\n\nexport class TopicEdit extends Page<ITopicEditProps, ITopicEdit> {\n    public async saveTopic() {\n        await this.update(async () => {\n            return Promise.resolve({notice: null});\n        });\n        await this.state.topic.save();\n        if (this.state.topic.error === null) {\n            await this.update(async () => {\n                return Promise.resolve({notice: \"Saved topic\"});\n            });\n        }\n    }\n\n    public async deleteTopic() {\n        await this.state.topic.delete();\n    }\n\n    protected async loadInitialData(fromProps: ITopicEditProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            return {topic};\n        });\n    }\n\n    protected blank(): ITopicEdit {\n        return {\n            notice: null,\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {Redirect} from \"react-router\";\nimport {InfoNotice} from \"../../../components/common/display/infoNotice/infoNotice\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutFormContainer} from \"../../../components/layout/layoutFormContainer/layoutFormContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {LayoutUnsafeBox} from \"../../../components/layout/layoutUnsafeBox/layoutUnsafeBox\";\nimport {LayoutWithPermissions} from \"../../../components/layout/layoutWithPermissions/layoutWithPermissions\";\nimport {TopicForm} from \"../../../components/topic/topicForm/topicForm\";\nimport NavigationService from \"../../../infrastructure/service/navigationService\";\nimport {ITopicEditProps, TopicEdit} from \"./topicEdit\";\n\nexport class TopicEditPage extends React.Component<ITopicEditProps> {\n    private data: TopicEdit;\n    private redirect: boolean;\n\n    constructor(props: ITopicEditProps) {\n        super(props);\n        this.redirect = false;\n        this.data = new TopicEdit(() => this.forceUpdate());\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicEdit(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (this.redirect) {\n            const home = new NavigationService().urlForRoot();\n            return <Redirect to={home}/>;\n        }\n\n        if (!this.guardInvalidState()) {\n            return <React.Fragment/>;\n        }\n\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n\n                <LayoutFormContainer error={this.data.state.topic.error}>\n                    <InfoNotice value={this.data.state.notice}/>\n                    <TopicForm submit={this.onSubmitFormEvent} topic={topic} saveText=\"Save\"/>\n                </LayoutFormContainer>\n\n                <LayoutWithPermissions user={this.props.user} requirePermissions={[\"CanDelete:Topic\"]}>\n                    <LayoutContentContainer>\n                        <LayoutUnsafeBox title=\"Unsafe commands\">\n                            <form>\n                                <fieldset>\n                                    <LayoutRightBox expand={true}>\n                                        <p>\n                                            Accidentally created this topic?\n                                        </p>\n                                        <p>\n                                            If it has no questions it can be deleted.\n                                        </p>\n                                        <p>\n                                            Careful! No undo for this!\n                                        </p>\n                                        <button onClick={this.onDeleteTopic}>Delete topic</button>\n                                    </LayoutRightBox>\n                                </fieldset>\n                            </form>\n                        </LayoutUnsafeBox>\n                    </LayoutContentContainer>\n                </LayoutWithPermissions>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onSubmitFormEvent = async () => await this.data.saveTopic();\n\n    private onDeleteTopic = async (e: React.FormEvent) => {\n        e.preventDefault();\n        await this.data.deleteTopic();\n        if (!this.data.state.topic.error) {\n            this.redirect = true;\n        }\n    }\n}\n","import { QuerySet } from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport { QuestionSummary } from \"../../../../../react-pangul-core/src/domain/questionSummary\";\nimport { Topic } from \"../../../../../react-pangul-core/src/domain/topic\";\nimport { UserContext } from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport { Page } from \"../../../infrastructure/componentHelpers/page\";\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport interface ITopicViewQuestionProps {\n    topic: string;\n    search: string;\n    user: UserContext;\n}\n\ninterface ITopicHome {\n    topic: Topic;\n    search: string;\n    pageSize: number;\n    questions: QuerySet<QuestionSummary>;\n}\n\nexport class TopicSearch extends Page<ITopicViewQuestionProps, ITopicHome> {\n    constructor(forceUpdate: () => void) {\n        super(forceUpdate);\n    }\n\n    public async search(value: string): Promise<void> {\n        await this.update(async () => {\n            return {search: value};\n        });\n\n        await this.refreshData();\n    }\n\n    public async next(): Promise<void> {\n        await this.state.questions.next();\n    }\n\n    public async prev(): Promise<void> {\n        await this.state.questions.prev();\n    }\n\n    public async setPageSize(pageSize: number) {\n        await this.update(async () => {\n            return {pageSize};\n        });\n        await this.refreshData();\n    }\n\n    protected async loadInitialData(fromProps: ITopicViewQuestionProps): Promise<void> {\n        await this.update(async () => {\n            const topic = await Topic.get(fromProps.topic);\n            if (topic.error) {\n                throw topic.error;\n            }\n\n            return {topic, search: fromProps.search};\n        });\n        await this.refreshData();\n    }\n\n    protected async refreshData(): Promise<void> {\n        await this.update(async () => {\n            const query = `topic:${this.state.topic.state.name} ${this.state.search}`;\n            const questions = await QuestionSummary.search(query, this.state.pageSize);\n            if (questions.error) {\n                throw questions.error;\n            }\n\n            return {questions};\n        });\n    }\n\n    protected blank(): ITopicHome {\n        return {\n            pageSize: DEFAULT_PAGE_SIZE,\n            questions: new QuerySet<QuestionSummary>(),\n            search: \"\",\n            topic: new Topic(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.topic.parent = this;\n        this.state.questions.parent = this;\n    }\n}\n","import * as React from \"react\";\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\nimport {SearchBar} from \"../../../components/common/fragments/searchBar/searchBar\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutRightBox} from \"../../../components/layout/layoutRightBox/layoutRightBox\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\nimport {TopicLink, TopicLinkType} from \"../../../components/topic/topicLink/topicLink\";\nimport {ITopicViewQuestionProps, TopicSearch} from \"./topicSearch\";\n\ninterface ITopicViewQuestionState {\n    lastSearchProp: string;\n}\n\nexport class TopicSearchPage extends React.Component<ITopicViewQuestionProps, ITopicViewQuestionState> {\n    private data: TopicSearch;\n\n    constructor(props: ITopicViewQuestionProps) {\n        super(props);\n        this.data = new TopicSearch(() => this.forceUpdate());\n        this.state = {\n            lastSearchProp: \"\"\n        };\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new TopicSearch(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public componentDidUpdate(prevProps: Readonly<ITopicViewQuestionProps>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (this.props.search !== this.state.lastSearchProp) {\n            this.setState({lastSearchProp: this.props.search}, () => {\n                this.data.load(this.props);\n            });\n        }\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return (<React.Fragment/>);\n        }\n\n        const questions = this.data.state.questions;\n        const search = this.data.state.search;\n        const topic = this.data.state.topic;\n\n        return (\n            <div className={\"component--TopicSearchPage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={topic.state}\n                                      loading={this.data.updating}/>\n\n                <SearchBar error={this.data.error}\n                           value={search}\n                           onChange={this.onSearchEvent}/>\n\n                <QuestionSummaryList questions={questions} showEmpty={true}/>\n\n                <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\n                                   queryState={questions.state}\n                                   onChangeSize={this.onChangeSize}\n                                   onNext={this.onNext}\n                                   onPrev={this.onPrev}\n                                   error={questions.error}/>\n\n                <LayoutContentContainer>\n                    <LayoutRightBox expand={true}>\n                        <TopicLink target={TopicLinkType.AddQuestion} topic={this.props.topic}>\n                            <button>Ask question</button>\n                        </TopicLink>\n                    </LayoutRightBox>\n                </LayoutContentContainer>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onSearchEvent = (value: string) => this.data.search(value);\n\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\n\n    private onNext = () => this.data.next();\n\n    private onPrev = () => this.data.prev();\n}\n","import {QuerySet} from \"../../../../../react-pangul-core/src/domain/querySet\";\nimport {QuestionSummary} from \"../../../../../react-pangul-core/src/domain/questionSummary\";\nimport {UserContext} from \"../../../../../react-pangul-core/src/domain/userContext\";\nimport {Page} from \"../../../infrastructure/componentHelpers/page\";\n\nconst DEFAULT_PAGE_SIZE = 5;\n\nexport interface IUserViewSelfProfileProps {\n    user: UserContext;\n}\n\ninterface IUserViewSelfProfile {\n    starQuestions: QuerySet<QuestionSummary>;\n    pageSize: number;\n}\n\nexport class UserViewSelfProfile extends Page<IUserViewSelfProfileProps, IUserViewSelfProfile> {\n    public async next(): Promise<void> {\n        await this.update(async () => {\n            await this.state.starQuestions.next();\n            return null;\n        });\n    }\n\n    public async prev(): Promise<void> {\n        await this.update(async () => {\n            await this.state.starQuestions.prev();\n            return null;\n        });\n    }\n\n    public async setPageSize(pageSize: number) {\n        await this.update(async () => {\n            return {pageSize};\n        });\n        await this.refreshData();\n    }\n\n    protected async loadInitialData(fromProps: IUserViewSelfProfileProps): Promise<void> {\n        await this.refreshData();\n    }\n\n    protected blank(): IUserViewSelfProfile {\n        return {\n            pageSize: DEFAULT_PAGE_SIZE,\n            starQuestions: new QuerySet<QuestionSummary>(),\n        };\n    }\n\n    protected rebind(): void {\n        this.state.starQuestions.parent = this;\n    }\n\n    protected async refreshData(): Promise<void> {\n        await this.update(async () => {\n            const starQuestions = await QuestionSummary.search(\"* topic:* is:star\", this.state.pageSize);\n            return {starQuestions};\n        });\n    }\n}\n","import * as React from \"react\";\nimport {QuerySetPaginator} from \"../../../components/common/fragments/querySetPaginator/querySetPaginator\";\nimport {LayoutContentContainer} from \"../../../components/layout/layoutContentContainer/layoutContentContainer\";\nimport {LayoutStandardHeader} from \"../../../components/layout/layoutStandardHeader/layoutStandardHeader\";\nimport {QuestionSummaryList} from \"../../../components/question/questionSummaryList/questionSummaryList\";\nimport {IUserViewSelfProfileProps, UserViewSelfProfile} from \"./userViewSelfProfile\";\n\nexport class UserViewSelfProfilePage extends React.Component<IUserViewSelfProfileProps> {\n    private data: UserViewSelfProfile;\n\n    constructor(props: IUserViewSelfProfileProps) {\n        super(props);\n        this.data = new UserViewSelfProfile(() => this.forceUpdate());\n    }\n\n    public componentDidMount() {\n        this.data.unload();\n        this.data = new UserViewSelfProfile(() => this.forceUpdate());\n        this.data.load(this.props);\n    }\n\n    public componentWillUnmount() {\n        this.data.unload();\n    }\n\n    public render() {\n        if (!this.guardInvalidState()) {\n            return \"\";\n        }\n\n        const starred = this.data.state.starQuestions;\n\n        return (\n            <div className={\"component--TopicHomePage\"}>\n                <LayoutStandardHeader user={this.props.user.state}\n                                      topic={null}\n                                      loading={this.data.updating}/>\n\n                <div>\n                    <LayoutContentContainer>\n                        <h3>Marked questions</h3>\n                    </LayoutContentContainer>\n\n                    <QuestionSummaryList questions={starred} showEmpty={true}/>\n\n                    <QuerySetPaginator allowedSizes={[1, 5, 10, 25]}\n                                       queryState={starred.state}\n                                       onChangeSize={this.onChangeSize}\n                                       onNext={this.onNext}\n                                       onPrev={this.onPrev}\n                                       error={starred.error}/>\n                </div>\n            </div>\n        );\n    }\n\n    public guardInvalidState(): boolean {\n        return this.data !== null;\n    }\n\n    private onChangeSize = (size: number) => this.data.setPageSize(size);\n\n    private onNext = () => this.data.next();\n\n    private onPrev = () => this.data.prev();\n}\n","import * as React from \"react\";\nimport {BrowserRouter, Route, Switch} from \"react-router-dom\";\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\nimport {TopicAnswerQuestionPage} from \"../../pages/answer/topicAnswerQuestion/topicAnswerQuestionPage\";\nimport {TopicEditAnswerPage} from \"../../pages/answer/topicEditAnswer/topicEditAnswerPage\";\nimport {GenericHelpPage} from \"../../pages/generic/genericHelpPage/genericHelpPage\";\nimport {GenericLogoutPage} from \"../../pages/generic/genericLogoutPage/genericLogoutPage\";\nimport {TopicAskQuestionPage} from \"../../pages/question/topicAskQuestion/topicAskQuestionPage\";\nimport {TopicEditQuestionPage} from \"../../pages/question/topicEditQuestion/topicEditQuestionPage\";\nimport {TopicViewQuestionPage} from \"../../pages/question/topicViewQuestion/topicViewQuestionPage\";\nimport {TopicDiscoverPage} from \"../../pages/topic/topicDiscover/topicDiscoverPage\";\nimport {TopicEditPage} from \"../../pages/topic/topicEdit/topicEditPage\";\nimport {TopicSearchPage} from \"../../pages/topic/topicSearch/topicSearchPage\";\nimport {UserViewSelfProfilePage} from \"../../pages/user/userViewProfile/userViewSelfProfilePage\";\n\nexport interface IAppRoutes {\n    user: UserContext;\n}\n\nexport class AppRoutes extends React.Component<IAppRoutes> {\n    public render() {\n        return (\n            <BrowserRouter>\n                <Switch>\n                    <Route exact={true} path=\"/\" render={this.discoverTopics}/>\n                    <Route exact={true} path=\"/help\" render={this.help}/>\n                    <Route exact={true} path=\"/self\" render={this.self}/>\n                    <Route exact={true} path=\"/logout\" render={this.logout}/>\n                    <Route exact={true} path=\"/t/:name\" render={this.searchTopic}/>\n                    <Route exact={true} path=\"/t/:name/search/:query\" render={this.searchTopicWithQuery}/>\n                    <Route exact={true} path=\"/t/:name/edit\" render={this.editTopic}/>\n                    <Route exact={true} path=\"/t/:name/ask\" render={this.askQuestion}/>\n                    <Route exact={true} path=\"/t/:name/:questionId\" render={this.viewQuestion}/>\n                    <Route exact={true} path=\"/t/:name/:questionId/edit\" render={this.editQuestion}/>\n                    <Route exact={true} path=\"/t/:name/:questionId/answer\" render={this.answerQuestion}/>\n                    <Route exact={true} path=\"/t/:name/:questionId/answer/:answerId/edit\" render={this.editAnswer}/>\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n\n    private help = () => (\n        <GenericHelpPage/>\n    )\n\n    private logout = () => (\n        <GenericLogoutPage user={this.props.user}/>\n    )\n\n    private self = () => (\n        <UserViewSelfProfilePage user={this.props.user}/>\n    )\n\n\n    private discoverTopics = () => (\n        <TopicDiscoverPage user={this.props.user} search=\"*\"/>\n    )\n\n    private searchTopicWithQuery = (props: any) => {\n        return (\n            <TopicSearchPage user={this.props.user} topic={props.match.params.name} search={props.match.params.query}/>\n        );\n    }\n\n    private searchTopic = (props: any) => (\n        <TopicSearchPage user={this.props.user} topic={props.match.params.name} search=\"*\"/>\n    )\n\n    private editTopic = (props: any) => (\n        <TopicEditPage user={this.props.user} topic={props.match.params.name}/>\n    )\n\n    private askQuestion = (props: any) => (\n        <TopicAskQuestionPage user={this.props.user}\n                              topic={props.match.params.name}/>\n    )\n\n    private viewQuestion = (props: any) => (\n        <TopicViewQuestionPage user={this.props.user}\n                               topic={props.match.params.name}\n                               question={props.match.params.questionId}/>\n    )\n\n    private editQuestion = (props: any) => (\n        <TopicEditQuestionPage user={this.props.user}\n                               topic={props.match.params.name}\n                               question={props.match.params.questionId}/>\n    )\n\n    private editAnswer = (props: any) => (\n        <TopicEditAnswerPage user={this.props.user}\n                             topic={props.match.params.name}\n                             question={props.match.params.questionId}\n                             answer={props.match.params.answerId}/>\n    )\n\n    private answerQuestion = (props: any) => (\n        <TopicAnswerQuestionPage user={this.props.user}\n                                 topic={props.match.params.name}\n                                 question={props.match.params.questionId}/>\n    )\n}\n","import * as React from \"react\";\nimport {BrowserRouter, Switch} from \"react-router-dom\";\nimport {UserContext} from \"../../../../react-pangul-core/src/domain/userContext\";\nimport {LayoutTheme} from \"../../components/layout/layoutTheme/layoutTheme\";\nimport {configureApplication, ISettings} from \"../../infrastructure/service/settingsProvider\";\nimport {GenericLoginPage} from \"../../pages/generic/genericLoginPage/genericLoginPage\";\nimport {AppAuth} from \"../appAuth/appAuth\";\nimport {AppRoutes} from \"../appRoutes/appRoutes\";\n\nexport interface IPangul {\n    settings: ISettings;\n}\n\nexport interface IPangulState {\n    user: UserContext;\n}\n\nexport class Pangul extends React.Component<IPangul, IPangulState> {\n    constructor(props: IPangul) {\n        super(props);\n        this.state = {\n            user: new UserContext(),\n        };\n    }\n\n    public componentDidMount() {\n        configureApplication(this.props.settings);\n    }\n\n    public render() {\n        return (\n            <LayoutTheme>\n                <AppAuth user={this.state.user}\n                         renderLoggedIn={this.showContent}\n                         renderLoggedOut={this.showLoginForm}/>\n            </LayoutTheme>\n        );\n    }\n\n    private showLoginForm = () => (<GenericLoginPage user={this.state.user}/>);\n\n    private showContent = () => {\n        return !this.props.settings.test.test\n            ? this.showMainContent()\n            : this.showTestContent();\n    }\n\n    private showMainContent = () => (<AppRoutes user={this.state.user}/>)\n\n    private showTestContent = () => {\n        if (this.props.settings.test.testContent == null) {\n            return <React.Fragment/>;\n        }\n        return (\n            <BrowserRouter>\n                <Switch>\n                    {this.props.settings.test.testContent(this.state.user)}\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n","import * as React from 'react';\nimport {Pangul} from \"./packages/react-pangul-app/src/app/pangul/pangul\";\nimport {ISettings} from \"./packages/react-pangul-app/src/infrastructure/service/settingsProvider\";\nimport {UserViewSelfProfilePage} from \"./packages/react-pangul-app/src/pages/user/userViewProfile/userViewSelfProfilePage\";\nimport {UserContext} from \"./packages/react-pangul-core/src/domain/userContext\";\n\nexport interface AppProps {\n    settings: ISettings;\n}\n\nconst appTestContent = (user: UserContext) => (\n    <React.Fragment>\n        <UserViewSelfProfilePage user={user}/>\n    </React.Fragment>\n);\n\nexport const App = (props: AppProps) => {\n    const settings = {...props.settings, testContent: appTestContent};\n    return (\n        <Pangul settings={settings}/>\n    );\n};\n\n\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL!,\n      window.location.toString()\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker) {\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a 'New content is\n                // available; please refresh.' message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // 'Content is cached for offline use.' message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type')!.indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {App} from './App';\nimport {ISettings} from \"./packages/react-pangul-app/src/infrastructure/service/settingsProvider\";\nimport AjaxFetch from './packages/react-pangul-core/src/infrastructure/fetch/ajaxFetch';\nimport registerServiceWorker from './registerServiceWorker';\n\nnew AjaxFetch(\"/\").get<ISettings>(\"config.json\").then((settings: ISettings) => {\n    ReactDOM.render(\n        <App settings={settings}/>,\n        document.getElementById('root') as HTMLElement\n    );\n    registerServiceWorker();\n});\n\n"],"sourceRoot":""}